<?xml version="1.0" encoding="UTF-8"?>

<d:dictionary xmlns="http://www.w3.org/1999/xhtml" xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng">
<d:entry id="_0" d:title="_"><d:index d:value="_" d:title="_"/><h1>_</h1><a class="toc_title" href="">
      Underscore.js <span class="version">(1.6.0)</span>
    </a>
    
<ul class="toc_section">
      <li> <a href="https://github.com/jashkenas/underscore">GitHub Repository</a></li>
      <li> <a href="http://underscorejs.org/docs/underscore.html">Annotated Source</a></li>
      <li> <a href="http://documentcloud.github.io/underscore-contrib/">Underscore-contrib</a></li>
    </ul>

    
<a class="toc_title" href="x-dictionary:d:collections">
      Collections
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:each">each</a></li>
      <li>- <a href="x-dictionary:d:map">map</a></li>
      <li>- <a href="x-dictionary:d:reduce">reduce</a></li>
      <li>- <a href="x-dictionary:d:reduceRight">reduceRight</a></li>
      <li>- <a href="x-dictionary:d:find">find</a></li>
      <li>- <a href="x-dictionary:d:filter">filter</a></li>
      <li>- <a href="x-dictionary:d:where">where</a></li>
      <li>- <a href="x-dictionary:d:findWhere">findWhere</a></li>
      <li>- <a href="x-dictionary:d:reject">reject</a></li>
      <li>- <a href="x-dictionary:d:every">every</a></li>
      <li>- <a href="x-dictionary:d:some">some</a></li>
      <li>- <a href="x-dictionary:d:contains">contains</a></li>
      <li>- <a href="x-dictionary:d:invoke">invoke</a></li>
      <li>- <a href="x-dictionary:d:pluck">pluck</a></li>
      <li>- <a href="x-dictionary:d:max">max</a></li>
      <li>- <a href="x-dictionary:d:min">min</a></li>
      <li>- <a href="x-dictionary:d:sortBy">sortBy</a></li>
      <li>- <a href="x-dictionary:d:groupBy">groupBy</a></li>
      <li>- <a href="x-dictionary:d:indexBy">indexBy</a></li>
      <li>- <a href="x-dictionary:d:countBy">countBy</a></li>
      <li>- <a href="x-dictionary:d:shuffle">shuffle</a></li>
      <li>- <a href="x-dictionary:d:sample">sample</a></li>
      <li>- <a href="x-dictionary:d:toArray">toArray</a></li>
      <li>- <a href="x-dictionary:d:size">size</a></li>
    </ul>

    
<a class="toc_title" href="x-dictionary:d:arrays">
      Arrays
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:first">first</a></li>
      <li>- <a href="x-dictionary:d:initial">initial</a></li>
      <li>- <a href="x-dictionary:d:last">last</a></li>
      <li>- <a href="x-dictionary:d:rest">rest</a></li>
      <li>- <a href="x-dictionary:d:compact">compact</a></li>
      <li>- <a href="x-dictionary:d:flatten">flatten</a></li>
      <li>- <a href="x-dictionary:d:without">without</a></li>
      <li>- <a href="x-dictionary:d:partition">partition</a></li>
      <li>- <a href="x-dictionary:d:union">union</a></li>
      <li>- <a href="x-dictionary:d:intersection">intersection</a></li>
      <li>- <a href="x-dictionary:d:difference">difference</a></li>
      <li>- <a href="x-dictionary:d:uniq">uniq</a></li>
      <li>- <a href="x-dictionary:d:zip">zip</a></li>
      <li>- <a href="x-dictionary:d:object">object</a></li>
      <li>- <a href="x-dictionary:d:indexOf">indexOf</a></li>
      <li>- <a href="x-dictionary:d:lastIndexOf">lastIndexOf</a></li>
      <li>- <a href="x-dictionary:d:sortedIndex">sortedIndex</a></li>
      <li>- <a href="x-dictionary:d:range">range</a></li>
    </ul>

    
<a class="toc_title" href="x-dictionary:d:functions">
      Functions
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:bind">bind</a></li>
      <li>- <a href="x-dictionary:d:bindAll">bindAll</a></li>
      <li>- <a href="x-dictionary:d:partial">partial</a></li>
      <li>- <a href="x-dictionary:d:memoize">memoize</a></li>
      <li>- <a href="x-dictionary:d:delay">delay</a></li>
      <li>- <a href="x-dictionary:d:defer">defer</a></li>
      <li>- <a href="x-dictionary:d:throttle">throttle</a></li>
      <li>- <a href="x-dictionary:d:debounce">debounce</a></li>
      <li>- <a href="x-dictionary:d:once">once</a></li>
      <li>- <a href="x-dictionary:d:after">after</a></li>
      <li>- <a href="x-dictionary:d:now">now</a></li>
      <li>- <a href="x-dictionary:d:wrap">wrap</a></li>
      <li>- <a href="x-dictionary:d:compose">compose</a></li>
    </ul>

    
<a class="toc_title" href="x-dictionary:d:objects">
      Objects
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:keys">keys</a></li>
      <li>- <a href="x-dictionary:d:values">values</a></li>
      <li>- <a href="x-dictionary:d:pairs">pairs</a></li>
      <li>- <a href="x-dictionary:d:invert">invert</a></li>
      <li>- <a href="x-dictionary:d:object-functions">functions</a></li>
      <li>- <a href="x-dictionary:d:extend">extend</a></li>
      <li>- <a href="x-dictionary:d:pick">pick</a></li>
      <li>- <a href="x-dictionary:d:omit">omit</a></li>
      <li>- <a href="x-dictionary:d:defaults">defaults</a></li>
      <li>- <a href="x-dictionary:d:clone">clone</a></li>
      <li>- <a href="x-dictionary:d:tap">tap</a></li>
      <li>- <a href="x-dictionary:d:has">has</a></li>
      <li>- <a href="x-dictionary:d:matches">matches</a></li>
      <li>- <a href="x-dictionary:d:property">property</a></li>
      <li>- <a href="x-dictionary:d:isEqual">isEqual</a></li>
      <li>- <a href="x-dictionary:d:isEmpty">isEmpty</a></li>
      <li>- <a href="x-dictionary:d:isElement">isElement</a></li>
      <li>- <a href="x-dictionary:d:isArray">isArray</a></li>
      <li>- <a href="x-dictionary:d:isObject">isObject</a></li>
      <li>- <a href="x-dictionary:d:isArguments">isArguments</a></li>
      <li>- <a href="x-dictionary:d:isFunction">isFunction</a></li>
      <li>- <a href="x-dictionary:d:isString">isString</a></li>
      <li>- <a href="x-dictionary:d:isNumber">isNumber</a></li>
      <li>- <a href="x-dictionary:d:isFinite">isFinite</a></li>
      <li>- <a href="x-dictionary:d:isBoolean">isBoolean</a></li>
      <li>- <a href="x-dictionary:d:isDate">isDate</a></li>
      <li>- <a href="x-dictionary:d:isRegExp">isRegExp</a></li>
      <li>- <a href="x-dictionary:d:isNaN">isNaN</a></li>
      <li>- <a href="x-dictionary:d:isNull">isNull</a></li>
      <li>- <a href="x-dictionary:d:isUndefined">isUndefined</a></li>
    </ul>

    
<a class="toc_title" href="x-dictionary:d:utility">
      Utility
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:noConflict">noConflict</a></li>
      <li>- <a href="x-dictionary:d:identity">identity</a></li>
      <li>- <a href="x-dictionary:d:constant">constant</a></li>
      <li>- <a href="x-dictionary:d:times">times</a></li>
      <li>- <a href="x-dictionary:d:random">random</a></li>
      <li>- <a href="x-dictionary:d:mixin">mixin</a></li>
      <li>- <a href="x-dictionary:d:uniqueId">uniqueId</a></li>
      <li>- <a href="x-dictionary:d:escape">escape</a></li>
      <li>- <a href="x-dictionary:d:unescape">unescape</a></li>
      <li>- <a href="x-dictionary:d:result">result</a></li>
      <li>- <a href="x-dictionary:d:template">template</a></li>
    </ul>

    
<a class="toc_title" href="x-dictionary:d:chaining">
      Chaining
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:chain">chain</a></li>
      <li>- <a href="x-dictionary:d:value">value</a></li>
    </ul></d:entry>
<d:entry id="_1" d:title="0.1.0"><d:index d:value="0.1.0" d:title="0.1.0"/><h1>0.1.0</h1><p id="0.1.0">
        <b class="header">0.1.0</b>  <small><i>October 28, 2009</i></small>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.1.1/index.html">Docs</a><br/>
        Initial release of Underscore.js.
      </p></d:entry>
<d:entry id="_2" d:title="0.1.1"><d:index d:value="0.1.1" d:title="0.1.1"/><h1>0.1.1</h1><p id="0.1.1">
        <b class="header">0.1.1</b>  <small><i>October 28, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.1.0...0.1.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.1.1/index.html">Docs</a><br/>
        Added <tt>noConflict</tt>, so that the "Underscore" object can be assigned to
        other variables.
      </p></d:entry>
<d:entry id="_3" d:title="0.2.0"><d:index d:value="0.2.0" d:title="0.2.0"/><h1>0.2.0</h1><p id="0.2.0">
        <b class="header">0.2.0</b>  <small><i>October 28, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.1.1...0.2.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.2.0/index.html">Docs</a><br/>
        Added <tt>compose</tt> and <tt>lastIndexOf</tt>, renamed <tt>inject</tt> to
        <tt>reduce</tt>, added aliases for <tt>inject</tt>, <tt>filter</tt>,
        <tt>every</tt>, <tt>some</tt>, and <tt>forEach</tt>.
      </p></d:entry>
<d:entry id="_4" d:title="0.3.0"><d:index d:value="0.3.0" d:title="0.3.0"/><h1>0.3.0</h1><p id="0.3.0">
        <b class="header">0.3.0</b>  <small><i>October 29, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.2.0...0.3.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.3.0/index.html">Docs</a><br/>
        Added <a href="https://github.com/DmitryBaranovskiy">Dmitry Baranovskiy</a>'s
        comprehensive optimizations, merged in
        <a href="https://github.com/kriskowal">Kris Kowal</a>'s patches to make Underscore
        <a href="http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a> and
        <a href="http://narwhaljs.org/">Narwhal</a> compliant.
      </p></d:entry>
<d:entry id="_5" d:title="0.3.1"><d:index d:value="0.3.1" d:title="0.3.1"/><h1>0.3.1</h1><p id="0.3.1">
        <b class="header">0.3.1</b>  <small><i>October 29, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.3.0...0.3.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.3.1/index.html">Docs</a><br/>
        All iterators are now passed in the original collection as their third
        argument, the same as JavaScript 1.6's <b>forEach</b>. Iterating over
        objects is now called with <tt>(value, key, collection)</tt>, for details
        see <a href="x-dictionary:d:each"><tt>_.each</tt></a>.
      </p></d:entry>
<d:entry id="_6" d:title="0.3.2"><d:index d:value="0.3.2" d:title="0.3.2"/><h1>0.3.2</h1><p id="0.3.2">
        <b class="header">0.3.2</b>  <small><i>October 29, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.3.1...0.3.2">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.3.2/index.html">Docs</a><br/>
        Now runs on stock <a href="http://www.mozilla.org/rhino/">Rhino</a>
        interpreters with: <tt>load("underscore.js")</tt>.
        Added <a href="x-dictionary:d:identity"><tt>identity</tt></a> as a utility function.
      </p></d:entry>
<d:entry id="_7" d:title="0.3.3"><d:index d:value="0.3.3" d:title="0.3.3"/><h1>0.3.3</h1><p id="0.3.3">
        <b class="header">0.3.3</b>  <small><i>October 31, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.3.2...0.3.3">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.3.3/index.html">Docs</a><br/>
        Added the JavaScript 1.8 function <tt>reduceRight</tt>. Aliased it
        as <tt>foldr</tt>, and aliased <tt>reduce</tt> as <tt>foldl</tt>.
      </p></d:entry>
<d:entry id="_8" d:title="0.4.0"><d:index d:value="0.4.0" d:title="0.4.0"/><h1>0.4.0</h1><p id="0.4.0">
        <b class="header">0.4.0</b>  <small><i>November 7, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.3.3...0.4.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.4.0/index.html">Docs</a><br/>
        All Underscore functions can now be called in an object-oriented style,
        like so: <tt>_([1, 2, 3]).map(...);</tt>. Original patch provided by
        <a href="http://macournoyer.com/">Marc-André Cournoyer</a>.
        Wrapped objects can be chained through multiple
        method invocations. A <a href="x-dictionary:d:object-functions"><tt>functions</tt></a> method
        was added, providing a sorted list of all the functions in Underscore.
      </p></d:entry>
<d:entry id="_9" d:title="0.4.1"><d:index d:value="0.4.1" d:title="0.4.1"/><h1>0.4.1</h1><p id="0.4.1">
        <b class="header">0.4.1</b>  <small><i>November 8, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.4.0...0.4.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.4.1/index.html">Docs</a><br/>
        Chained Underscore objects now support the Array prototype methods, so
        that you can perform the full range of operations on a wrapped array
        without having to break your chain. Added a <tt>breakLoop</tt> method
        to <b>break</b> in the middle of any Underscore iteration. Added an
        <tt>isEmpty</tt> function that works on arrays and objects.
      </p></d:entry>
<d:entry id="_a" d:title="0.4.2"><d:index d:value="0.4.2" d:title="0.4.2"/><h1>0.4.2</h1><p id="0.4.2">
        <b class="header">0.4.2</b>  <small><i>November 9, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.4.1...0.4.2">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.4.2/index.html">Docs</a><br/>
        Renamed the unwrapping function to <tt>value</tt>, for clarity.
      </p></d:entry>
<d:entry id="_b" d:title="0.4.3"><d:index d:value="0.4.3" d:title="0.4.3"/><h1>0.4.3</h1><p id="0.4.3">
        <b class="header">0.4.3</b>  <small><i>November 9, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.4.2...0.4.3">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.4.3/index.html">Docs</a><br/>
        Started using the native <tt>StopIteration</tt> object in browsers that support it.
        Fixed Underscore setup for CommonJS environments.
      </p></d:entry>
<d:entry id="_c" d:title="0.4.4"><d:index d:value="0.4.4" d:title="0.4.4"/><h1>0.4.4</h1><p id="0.4.4">
        <b class="header">0.4.4</b>  <small><i>November 18, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.4.3...0.4.4">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.4.4/index.html">Docs</a><br/>
        Added <tt>isString</tt>, and <tt>isNumber</tt>, for consistency. Fixed
        <tt>_.isEqual(NaN, NaN)</tt> to return <i>true</i> (which is debatable).
      </p></d:entry>
<d:entry id="_d" d:title="0.4.5"><d:index d:value="0.4.5" d:title="0.4.5"/><h1>0.4.5</h1><p id="0.4.5">
        <b class="header">0.4.5</b>  <small><i>November 19, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.4.4...0.4.5">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.4.5/index.html">Docs</a><br/>
        Added <tt>rest</tt> for Arrays and arguments objects, and aliased
        <tt>first</tt> as <tt>head</tt>, and <tt>rest</tt> as <tt>tail</tt>,
        thanks to <a href="https://github.com/lukesutton">Luke Sutton</a>'s patches.
        Added tests ensuring that all Underscore Array functions also work on
        <i>arguments</i> objects.
      </p></d:entry>
<d:entry id="_e" d:title="0.4.6"><d:index d:value="0.4.6" d:title="0.4.6"/><h1>0.4.6</h1><p id="0.4.6">
        <b class="header">0.4.6</b>  <small><i>November 30, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.4.5...0.4.6">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.4.6/index.html">Docs</a><br/>
        Added the <tt>range</tt> function, a port of the
        <a href="http://docs.python.org/library/functions.html#range">Python
        function of the same name</a>, for generating flexibly-numbered lists
        of integers. Original patch contributed by
        <a href="https://github.com/kylichuku">Kirill Ishanov</a>.
      </p></d:entry>
<d:entry id="_f" d:title="0.4.7"><d:index d:value="0.4.7" d:title="0.4.7"/><h1>0.4.7</h1><p id="0.4.7">
        <b class="header">0.4.7</b>  <small><i>December 6, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.4.6...0.4.7">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.4.7/index.html">Docs</a><br/>
        Added <tt>isDate</tt>, <tt>isNaN</tt>, and <tt>isNull</tt>, for completeness.
        Optimizations for <tt>isEqual</tt> when checking equality between Arrays
        or Dates. <tt>_.keys</tt> is now <small><i><b>25%2X</b></i></small> faster (depending on your
        browser) which speeds up the functions that rely on it, such as <tt>_.each</tt>.
      </p></d:entry>
<d:entry id="_g" d:title="0.5.0"><d:index d:value="0.5.0" d:title="0.5.0"/><h1>0.5.0</h1><p id="0.5.0">
        <b class="header">0.5.0</b>  <small><i>December 7, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.4.7...0.5.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.5.0/index.html">Docs</a><br/>
        <b>[API Changes]</b> <tt>_.bindAll</tt> now takes the context object as
        its first parameter. If no method names are passed, all of the context
        object's methods are bound to it, enabling chaining and easier binding.
        <tt>_.functions</tt> now takes a single argument and returns the names
        of its Function properties. Calling <tt>_.functions(_)</tt> will get you
        the previous behavior.
        Added <tt>_.isRegExp</tt> so that <tt>isEqual</tt> can now test for RegExp equality.
        All of the "is" functions have been shrunk down into a single definition.
        <a href="https://github.com/grayrest">Karl Guertin</a> contributed patches.
      </p></d:entry>
<d:entry id="_h" d:title="0.5.1"><d:index d:value="0.5.1" d:title="0.5.1"/><h1>0.5.1</h1><p id="0.5.1">
        <b class="header">0.5.1</b>  <small><i>December 9, 2009</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.5.0...0.5.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.5.1/index.html">Docs</a><br/>
        Added an <tt>_.isArguments</tt> function. Lots of little safety checks
        and optimizations contributed by
        <a href="https://github.com/iamnoah">Noah Sloan</a> and
        <a href="http://themoell.com/">Andri Möll</a>.
      </p></d:entry>
<d:entry id="_i" d:title="0.5.2"><d:index d:value="0.5.2" d:title="0.5.2"/><h1>0.5.2</h1><p id="0.5.2">
        <b class="header">0.5.2</b>  <small><i>January 1, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.5.1...0.5.2">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.5.2/index.html">Docs</a><br/>
        New implementations of <tt>isArray</tt>, <tt>isDate</tt>, <tt>isFunction</tt>,
        <tt>isNumber</tt>, <tt>isRegExp</tt>, and <tt>isString</tt>, thanks to
        a suggestion from
        <a href="http://www.broofa.com/">Robert Kieffer</a>.
        Instead of doing <tt>Object#toString</tt>
        comparisons, they now check for expected properties, which is less safe,
        but more than an order of magnitude faster. Most other Underscore
        functions saw minor speed improvements as a result.
        <a href="http://dolzhenko.org/">Evgeniy Dolzhenko</a>
        contributed <tt>_.tap</tt>,
        <a href="http://ruby-doc.org/core-1.9/classes/Object.html#M000191">similar to Ruby 1.9's</a>,
        which is handy for injecting side effects (like logging) into chained calls.
      </p></d:entry>
<d:entry id="_j" d:title="0.5.4"><d:index d:value="0.5.4" d:title="0.5.4"/><h1>0.5.4</h1><p id="0.5.4">
        <b class="header">0.5.4</b>  <small><i>January 5, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.5.2...0.5.4">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.5.4/index.html">Docs</a><br/>
        Fix for multiple single quotes within a template string for
        <tt>_.template</tt>. See:
        <a href="http://www.west-wind.com/Weblog/posts/509108.aspx">Rick Strahl's blog post</a>.
      </p></d:entry>
<d:entry id="_k" d:title="0.5.5"><d:index d:value="0.5.5" d:title="0.5.5"/><h1>0.5.5</h1><p id="0.5.5">
        <b class="header">0.5.5</b>  <small><i>January 9, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.5.4...0.5.5">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.5.5/index.html">Docs</a><br/>
        Fix for a bug in MobileSafari's OOP-wrapper, with the arguments object.
      </p></d:entry>
<d:entry id="_l" d:title="0.5.6"><d:index d:value="0.5.6" d:title="0.5.6"/><h1>0.5.6</h1><p id="0.5.6">
        <b class="header">0.5.6</b>  <small><i>January 18, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.5.5...0.5.6">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.5.6/index.html">Docs</a><br/>
        Customizable delimiters for <tt>_.template</tt>, contributed by
        <a href="https://github.com/iamnoah">Noah Sloan</a>.
      </p></d:entry>
<d:entry id="_m" d:title="0.5.7"><d:index d:value="0.5.7" d:title="0.5.7"/><h1>0.5.7</h1><p id="0.5.7">
        <b class="header">0.5.7</b>  <small><i>January 20, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.5.6...0.5.7">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.5.7/index.html">Docs</a><br/>
        A safer implementation of <tt>_.isArguments</tt>, and a
        faster <tt>_.isNumber</tt>,<br/>thanks to
        <a href="http://jedschmidt.com/">Jed Schmidt</a>.
      </p></d:entry>
<d:entry id="_n" d:title="0.5.8"><d:index d:value="0.5.8" d:title="0.5.8"/><h1>0.5.8</h1><p id="0.5.8">
        <b class="header">0.5.8</b>  <small><i>January 28, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.5.7...0.5.8">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.5.8/index.html">Docs</a><br/>
        Fixed Underscore's collection functions to work on
        <a href="https://developer.mozilla.org/En/DOM/NodeList">NodeLists</a> and
        <a href="https://developer.mozilla.org/En/DOM/HTMLCollection">HTMLCollections</a>
        once more, thanks to
        <a href="https://github.com/JustinTulloss">Justin Tulloss</a>.
      </p></d:entry>
<d:entry id="_o" d:title="0.6.0"><d:index d:value="0.6.0" d:title="0.6.0"/><h1>0.6.0</h1><p id="0.6.0">
        <b class="header">0.6.0</b>  <small><i>February 24, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.5.8...0.6.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/0.6.0/index.html">Docs</a><br/>
        Major release. Incorporates a number of
        <a href="https://github.com/ratbeard">Mile Frawley's</a> refactors for
        safer duck-typing on collection functions, and cleaner internals. A new
        <tt>_.mixin</tt> method that allows you to extend Underscore with utility
        functions of your own. Added <tt>_.times</tt>, which works the same as in
        Ruby or Prototype.js. Native support for ECMAScript 5's <tt>Array.isArray</tt>,
        and <tt>Object.keys</tt>.
      </p></d:entry>
<d:entry id="_p" d:title="1.0.0"><d:index d:value="1.0.0" d:title="1.0.0"/><h1>1.0.0</h1><p id="1.0.0">
        <b class="header">1.0.0</b>  <small><i>March 18, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/0.6.0...1.0.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.0.0/index.html">Docs</a><br/>
        Things have been stable for many months now, so Underscore is now
        considered to be out of beta, at <b>1.0</b>. Improvements since <b>0.6</b>
        include <tt>_.isBoolean</tt>, and the ability to have <tt>_.extend</tt>
        take multiple source objects.
      </p></d:entry>
<d:entry id="_q" d:title="1.0.1"><d:index d:value="1.0.1" d:title="1.0.1"/><h1>1.0.1</h1><p id="1.0.1">
        <b class="header">1.0.1</b>  <small><i>March 19, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.0.0...1.0.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.0.1/index.html">Docs</a><br/>
        Bugfix for <tt>_.isEqual</tt>, when comparing two objects with the same
        number of undefined keys, but with different names.
      </p></d:entry>
<d:entry id="_r" d:title="1.0.2"><d:index d:value="1.0.2" d:title="1.0.2"/><h1>1.0.2</h1><p id="1.0.2">
        <b class="header">1.0.2</b>  <small><i>March 23, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.0.1...1.0.2">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.0.2/index.html">Docs</a><br/>
        Fixes <tt>_.isArguments</tt> in recent versions of Opera, which have
        arguments objects as real Arrays.
      </p></d:entry>
<d:entry id="_s" d:title="1.0.3"><d:index d:value="1.0.3" d:title="1.0.3"/><h1>1.0.3</h1><p id="1.0.3">
        <b class="header">1.0.3</b>  <small><i>June 14, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.0.2...1.0.3">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.0.3/index.html">Docs</a><br/>
        Patch that makes <tt>_.isEqual</tt> return <tt>false</tt> if any property
        of the compared object has a <tt>NaN</tt> value. Technically the correct
        thing to do, but of questionable semantics. Watch out for NaN comparisons.
      </p></d:entry>
<d:entry id="_t" d:title="1.0.4"><d:index d:value="1.0.4" d:title="1.0.4"/><h1>1.0.4</h1><p id="1.0.4">
        <b class="header">1.0.4</b>  <small><i>June 22, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.0.3...1.0.4">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.0.4/index.html">Docs</a><br/>
        <a href="http://themoell.com/">Andri Möll</a> contributed the <tt>_.memoize</tt>
        function, which can be used to speed up expensive repeated computations
        by caching the results.
      </p></d:entry>
<d:entry id="_u" d:title="1.1.0"><d:index d:value="1.1.0" d:title="1.1.0"/><h1>1.1.0</h1><p id="1.1.0">
        <b class="header">1.1.0</b>  <small><i>August 18, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.0.4...1.1.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.1.0/index.html">Docs</a><br/>
        The method signature of <tt>_.reduce</tt> has been changed to match
        the ECMAScript 5 signature, instead of the Ruby/Prototype.js version.
        This is a backwards-incompatible change. <tt>_.template</tt> may now be
        called with no arguments, and preserves whitespace. <tt>_.contains</tt>
        is a new alias for <tt>_.include</tt>.
      </p></d:entry>
<d:entry id="_v" d:title="1.1.1"><d:index d:value="1.1.1" d:title="1.1.1"/><h1>1.1.1</h1><p id="1.1.1">
        <b class="header">1.1.1</b>  <small><i>October 5, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.1.0...1.1.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.1.1/index.html">Docs</a><br/>
        Improved the speed of <tt>_.template</tt>, and its handling of multiline
        interpolations. Ryan Tenney contributed optimizations to many Underscore
        functions. An annotated version of the source code is now available.
      </p></d:entry>
<d:entry id="_w" d:title="1.1.2"><d:index d:value="1.1.2" d:title="1.1.2"/><h1>1.1.2</h1><p id="1.1.2">
        <b class="header">1.1.2</b>  <small><i>October 15, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.1.1...1.1.2">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.1.2/index.html">Docs</a><br/>
        Fixed <tt>_.contains</tt>, which was mistakenly pointing at
        <tt>_.intersect</tt> instead of <tt>_.include</tt>, like it should
        have been. Added <tt>_.unique</tt> as an alias for <tt>_.uniq</tt>.
      </p></d:entry>
<d:entry id="_x" d:title="1.1.3"><d:index d:value="1.1.3" d:title="1.1.3"/><h1>1.1.3</h1><p id="1.1.3">
        <b class="header">1.1.3</b>  <small><i>December 1, 2010</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.1.2...1.1.3">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.1.3/index.html">Docs</a><br/>
        In CommonJS, Underscore may now be required with just: <br/>
        <tt>var _ = require("underscore")</tt>.
        Added <tt>_.throttle</tt> and <tt>_.debounce</tt> functions.
        Removed <tt>_.breakLoop</tt>, in favor of an ECMA5-style un-<i>break</i>-able
        each implementation  this removes the try/catch, and you'll now have
        better stack traces for exceptions that are thrown within an Underscore iterator.
        Improved the <b>isType</b> family of functions for better interoperability
        with Internet Explorer host objects.
        <tt>_.template</tt> now correctly escapes backslashes in templates.
        Improved <tt>_.reduce</tt> compatibility with the ECMA5 version:
        if you don't pass an initial value, the first item in the collection is used.
        <tt>_.each</tt> no longer returns the iterated collection, for improved
        consistency with ES5's <tt>forEach</tt>.
      </p></d:entry>
<d:entry id="_y" d:title="1.1.4"><d:index d:value="1.1.4" d:title="1.1.4"/><h1>1.1.4</h1><p id="1.1.4">
        <b class="header">1.1.4</b>  <small><i>January 9, 2011</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.1.3...1.1.4">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.1.4/index.html">Docs</a><br/>
        Improved compliance with ES5's Array methods when passing <tt>null</tt>
        as a value. <tt>_.wrap</tt> now correctly sets <tt>this</tt> for the
        wrapped function. <tt>_.indexOf</tt> now takes an optional flag for
        finding the insertion index in an array that is guaranteed to already
        be sorted. Avoiding the use of <tt>.callee</tt>, to allow <tt>_.isArray</tt>
        to work properly in ES5's strict mode.
      </p></d:entry>
<d:entry id="_z" d:title="1.1.5"><d:index d:value="1.1.5" d:title="1.1.5"/><h1>1.1.5</h1><p id="1.1.5">
        <b class="header">1.1.5</b>  <small><i>March 20, 2011</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.1.4...1.1.5">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.1.5/index.html">Docs</a><br/>
        Added an <tt>_.defaults</tt> function, for use merging together JS objects
        representing default options.
        Added an <tt>_.once</tt> function, for manufacturing functions that should
        only ever execute a single time.
        <tt>_.bind</tt> now delegates to the native ECMAScript 5 version,
        where available.
        <tt>_.keys</tt> now throws an error when used on non-Object values, as in
        ECMAScript 5.
        Fixed a bug with <tt>_.keys</tt> when used over sparse arrays.
      </p></d:entry>
<d:entry id="_10" d:title="1.1.6"><d:index d:value="1.1.6" d:title="1.1.6"/><h1>1.1.6</h1><p id="1.1.6">
        <b class="header">1.1.6</b>  <small><i>April 18, 2011</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.1.5...1.1.6">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.1.6/index.html">Docs</a><br/>
        Added <tt>_.after</tt>, which will return a function that only runs after
        first being called a specified number of times.
        <tt>_.invoke</tt> can now take a direct function reference.
        <tt>_.every</tt> now requires an iterator function to be passed, which
        mirrors the ECMA5 API.
        <tt>_.extend</tt> no longer copies keys when the value is undefined.
        <tt>_.bind</tt> now errors when trying to bind an undefined value.
      </p></d:entry>
<d:entry id="_11" d:title="1.1.7"><d:index d:value="1.1.7" d:title="1.1.7"/><h1>1.1.7</h1><p id="1.1.7">
        <b class="header">1.1.7</b>  <small><i>July 13, 2011</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.1.6...1.1.7">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.1.7/index.html">Docs</a><br/>
        Added <tt>_.groupBy</tt>, which aggregates a collection into groups of like items.
        Added <tt>_.union</tt> and <tt>_.difference</tt>, to complement the
        (re-named) <tt>_.intersection</tt>.
        Various improvements for support of sparse arrays.
        <tt>_.toArray</tt> now returns a clone, if directly passed an array.
        <tt>_.functions</tt> now also returns the names of functions that are present
        in the prototype chain.
      </p></d:entry>
<d:entry id="_12" d:title="1.2.0"><d:index d:value="1.2.0" d:title="1.2.0"/><h1>1.2.0</h1><p id="1.2.0">
        <b class="header">1.2.0</b>  <small><i>October 5, 2011</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.1.7...1.2.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.2.0/index.html">Docs</a><br/>
        <ul>
          <li>
            The <tt>_.isEqual</tt> function now
            supports true deep equality comparisons, with checks for cyclic structures,
            thanks to Kit Cambridge.
          </li>
          <li>
            Underscore templates now support HTML escaping interpolations, using
            <tt>%- ... %</tt> syntax.
          </li>
          <li>
            Ryan Tenney contributed <tt>_.shuffle</tt>, which uses a modified
            Fisher-Yates to give you a shuffled copy of an array.
          </li>
          <li>
            <tt>_.uniq</tt> can now be passed an optional iterator, to determine by
            what criteria an object should be considered unique.
          </li>
          <li>
            <tt>_.last</tt> now takes an optional argument which will return the last
            N elements of the list.
          </li>
          <li>
            A new <tt>_.initial</tt> function was added, as a mirror of <tt>_.rest</tt>,
            which returns all the initial values of a list (except the last N).
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_13" d:title="1.2.1"><d:index d:value="1.2.1" d:title="1.2.1"/><h1>1.2.1</h1><p id="1.2.1">
        <b class="header">1.2.1</b>  <small><i>October 24, 2011</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.2.0...1.2.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.2.1/index.html">Docs</a><br/>
        <ul>
          <li>
            Several important bug fixes for <tt>_.isEqual</tt>, which should now
            do better on mutated Arrays, and on non-Array objects with
            <tt>length</tt> properties. <small>(#329)</small>
          </li>
          <li>
            <a href="https://github.com/jrburke">James Burke</a>
            contributed Underscore exporting for AMD module loaders, and
            <a href="https://github.com/tonylukasavage">Tony Lukasavage</a>
            for Appcelerator Titanium.
            <small>(#335, #338)</small>
          </li>
          <li>
            You can now <tt>_.groupBy(list, 'property')</tt> as a shortcut for
            grouping values by a particular common property.
          </li>
          <li>
            <tt>_.throttle</tt>'d functions now fire immediately upon invocation,
            and are rate-limited thereafter <small>(#170, #266)</small>.
          </li>
          <li>
            Most of the <tt>_.is[Type]</tt> checks no longer ducktype.
          </li>
          <li>
            The <tt>_.bind</tt> function now also works on constructors, a-la
            ES5 ... but you would never want to use <tt>_.bind</tt> on a
            constructor function.
          </li>
          <li>
            <tt>_.clone</tt> no longer wraps non-object types in Objects.
          </li>
          <li>
            <tt>_.find</tt> and <tt>_.filter</tt> are now the preferred names for
            <tt>_.detect</tt> and <tt>_.select</tt>.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_14" d:title="1.2.2"><d:index d:value="1.2.2" d:title="1.2.2"/><h1>1.2.2</h1><p id="1.2.2">
        <b class="header">1.2.2</b>  <small><i>November 14, 2011</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.2.1...1.2.2">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.2.1/index.html">Docs</a><br/>
        <ul>
          <li>
            Continued tweaks to <tt>_.isEqual</tt> semantics. Now JS primitives are
            considered equivalent to their wrapped versions, and arrays are compared
            by their numeric properties only <small>(#351)</small>.
          </li>
          <li>
            <tt>_.escape</tt> no longer tries to be smart about not double-escaping
            already-escaped HTML entities. Now it just escapes regardless <small>(#350)</small>.
          </li>
          <li>
            In <tt>_.template</tt>, you may now leave semicolons out of evaluated
            statements if you wish: <tt>% }) %</tt> <small>(#369)</small>.
          </li>
          <li>
            <tt>_.after(callback, 0)</tt> will now trigger the callback immediately,
            making "after" easier to use with asynchronous APIs <small>(#366)</small>.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_15" d:title="1.2.3"><d:index d:value="1.2.3" d:title="1.2.3"/><h1>1.2.3</h1><p id="1.2.3">
        <b class="header">1.2.3</b>  <small><i>December 7, 2011</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.2.2...1.2.3">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.2.3/index.html">Docs</a><br/>
        <ul>
          <li>
            Dynamic scope is now preserved for compiled <tt>_.template</tt> functions,
            so you can use the value of <tt>this</tt> if you like.
          </li>
          <li>
            Sparse array support of <tt>_.indexOf</tt>, <tt>_.lastIndexOf</tt>.
          </li>
          <li>
            Both <tt>_.reduce</tt> and <tt>_.reduceRight</tt> can now be passed an
            explicitly <tt>undefined</tt> value. (There's no reason why you'd
            want to do this.)
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_16" d:title="1.2.4"><d:index d:value="1.2.4" d:title="1.2.4"/><h1>1.2.4</h1><p id="1.2.4">
        <b class="header">1.2.4</b>  <small><i>January 4, 2012</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.2.3...1.2.4">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.2.4/index.html">Docs</a><br/>
        <ul>
          <li>
            You now can (and probably should, as it's simpler)
            write <tt>_.chain(list)</tt>
            instead of <tt>_(list).chain()</tt>.
          </li>
          <li>
            Fix for escaped characters in Underscore templates, and for supporting
            customizations of <tt>_.templateSettings</tt> that only define one or
            two of the required regexes.
          </li>
          <li>
            Fix for passing an array as the first argument to an <tt>_.wrap</tt>'d function.
          </li>
          <li>
            Improved compatibility with ClojureScript, which adds a <tt>call</tt>
            function to <tt>String.prototype</tt>.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_17" d:title="1.3.0"><d:index d:value="1.3.0" d:title="1.3.0"/><h1>1.3.0</h1><p id="1.3.0">
        <b class="header">1.3.0</b>  <small><i>January 11, 2012</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.2.4...1.3.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.3.0/index.html">Docs</a><br/>
        <ul>
          <li>
            Removed AMD (RequireJS) support from Underscore. If you'd like to use
            Underscore with RequireJS, you can load it as a normal script, wrap
            or patch your copy, or download a forked version.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_18" d:title="1.3.1"><d:index d:value="1.3.1" d:title="1.3.1"/><h1>1.3.1</h1><p id="1.3.1">
        <b class="header">1.3.1</b>  <small><i>January 23, 2012</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.3.0...1.3.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.3.1/index.html">Docs</a><br/>
        <ul>
          <li>
            Added an <tt>_.has</tt> function, as a safer way to use <tt>hasOwnProperty</tt>.
          </li>
          <li>
            Added <tt>_.collect</tt> as an alias for <tt>_.map</tt>. Smalltalkers, rejoice.
          </li>
          <li>
            Reverted an old change so that <tt>_.extend</tt> will correctly copy
            over keys with undefined values again.
          </li>
          <li>
            Bugfix to stop escaping slashes within interpolations in <tt>_.template</tt>.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_19" d:title="1.3.3"><d:index d:value="1.3.3" d:title="1.3.3"/><h1>1.3.3</h1><p id="1.3.3">
        <b class="header">1.3.3</b>  <small><i>April 10, 2012</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.3.1...1.3.3">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.3.3/index.html">Docs</a><br/>
        <ul>
          <li>
            Many improvements to <tt>_.template</tt>, which now provides the
            <tt>source</tt> of the template function as a property, for potentially
            even more efficient pre-compilation on the server-side. You may now
            also set the <tt>variable</tt> option when creating a template,
            which will cause your passed-in data to be made available under the
            variable you named, instead of using a <tt>with</tt> statement 
            significantly improving the speed of rendering the template.
          </li>
          <li>
            Added the <tt>pick</tt> function, which allows you to filter an
            object literal with a whitelist of allowed property names.
          </li>
          <li>
            Added the <tt>result</tt> function, for convenience when working
            with APIs that allow either functions or raw properties.
          </li>
          <li>
            Added the <tt>isFinite</tt> function, because sometimes knowing that
            a value is a number just ain't quite enough.
          </li>
          <li>
            The <tt>sortBy</tt> function may now also be passed the string name
            of a property to use as the sort order on each object.
          </li>
          <li>
            Fixed <tt>uniq</tt> to work with sparse arrays.
          </li>
          <li>
            The <tt>difference</tt> function now performs a shallow flatten
            instead of a deep one when computing array differences.
          </li>
          <li>
            The <tt>debounce</tt> function now takes an <tt>immediate</tt>
            parameter, which will cause the callback to fire on the leading
            instead of the trailing edge.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1a" d:title="1.4.0"><d:index d:value="1.4.0" d:title="1.4.0"/><h1>1.4.0</h1><p id="1.4.0">
        <b class="header">1.4.0</b>  <small><i>September 27, 2012</i></small>   <a href="https://github.com/jashkenas/underscore/compare/1.3.3...1.4.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.4.0/index.html">Docs</a><br/>
        <ul>
          <li>
            Added a <tt>pairs</tt> function, for turning a JavaScript object
            into <tt>[key, value]</tt> pairs ... as well as an <tt>object</tt>
            function, for converting an array of <tt>[key, value]</tt> pairs
            into an object.
          </li>
          <li>
            Added a <tt>countBy</tt> function, for counting the number of objects
            in a list that match a certain criteria.
          </li>
          <li>
            Added an <tt>invert</tt> function, for performing a simple inversion
            of the keys and values in an object.
          </li>
          <li>
            Added a <tt>where</tt> function, for easy cases of filtering a list
            for objects with specific values.
          </li>
          <li>
            Added an <tt>omit</tt> function, for filtering an object to remove
            certain keys.
          </li>
          <li>
            Added a <tt>random</tt> function, to return a random number in a
            given range.
          </li>
          <li>
            <tt>_.debounce</tt>'d functions now return their last updated value,
            just like <tt>_.throttle</tt>'d functions do.
          </li>
          <li>
            The <tt>sortBy</tt> function now runs a stable sort algorithm.
          </li>
          <li>
            Added the optional <tt>fromIndex</tt> option to <tt>indexOf</tt> and
            <tt>lastIndexOf</tt>.
          </li>
          <li>
            "Sparse" arrays are no longer supported in Underscore iteration
            functions. Use a <tt>for</tt> loop instead (or better yet, an object).
          </li>
          <li>
            The <tt>min</tt> and <tt>max</tt> functions may now be called on
            <i>very</i> large arrays.
          </li>
          <li>
            Interpolation in templates now represents <tt>null</tt> and
            <tt>undefined</tt> as the empty string.
          </li>
          <li>
            <del>Underscore iteration functions no longer accept <tt>null</tt> values
            as a no-op argument. You'll get an early error instead.</del>
          </li>
          <li>
            A number of edge-cases fixes and tweaks, which you can spot in the
            <a href="https://github.com/jashkenas/underscore/compare/1.3.3...1.4.0">diff</a>.
            Depending on how you're using Underscore, <b>1.4.0</b> may be more
            backwards-incompatible than usual  please test when you upgrade.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1b" d:title="1.4.1"><d:index d:value="1.4.1" d:title="1.4.1"/><h1>1.4.1</h1><p id="1.4.1">
        <b class="header">1.4.1</b>  <small><i>October 1, 2012</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.4.0...1.4.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.4.1/index.html">Docs</a><br/>
        <ul>
          <li>
            Fixed a 1.4.0 regression in the <tt>lastIndexOf</tt> function.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1c" d:title="1.4.2"><d:index d:value="1.4.2" d:title="1.4.2"/><h1>1.4.2</h1><p id="1.4.2">
        <b class="header">1.4.2</b>  <small><i>October 6, 2012</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.4.1...1.4.2">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.4.2/index.html">Docs</a><br/>
        <ul>
          <li>
            For backwards compatibility, returned to pre-1.4.0 behavior when
            passing <tt>null</tt> to iteration functions. They now become no-ops
            again.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1d" d:title="1.4.3"><d:index d:value="1.4.3" d:title="1.4.3"/><h1>1.4.3</h1><p id="1.4.3">
        <b class="header">1.4.3</b>  <small><i>December 4, 2012</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.4.2...1.4.3">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.4.3/index.html">Docs</a><br/>
        <ul>
          <li>
            Improved Underscore compatibility with Adobe's JS engine that can be
            used to script Illustrator, Photoshop, and friends.
          </li>
          <li>
            Added a default <tt>_.identity</tt> iterator to <tt>countBy</tt> and
            <tt>groupBy</tt>.
          </li>
          <li>
            The <tt>uniq</tt> function can now take <tt>array, iterator, context</tt>
            as the argument list.
          </li>
          <li>
            The <tt>times</tt> function now returns the mapped array of iterator
            results.
          </li>
          <li>
            Simplified and fixed bugs in <tt>throttle</tt>.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1e" d:title="1.4.4"><d:index d:value="1.4.4" d:title="1.4.4"/><h1>1.4.4</h1><p id="1.4.4">
        <b class="header">1.4.4</b>  <small><i>January 30, 2013</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.4.3...1.4.4">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.4.4/index.html">Docs</a><br/>
        <ul>
          <li>
            Added <tt>_.findWhere</tt>, for finding the first element in a list
            that matches a particular set of keys and values.
          </li>
          <li>
            Added <tt>_.partial</tt>, for partially applying a function <i>without</i>
            changing its dynamic reference to <tt>this</tt>.
          </li>
          <li>
            Simplified <tt>bind</tt> by removing some edge cases involving
            constructor functions. In short: don't <tt>_.bind</tt> your
            constructors.
          </li>
          <li>
            A minor optimization to <tt>invoke</tt>.
          </li>
          <li>
            Fix bug in the minified version due to the minifier incorrectly
            optimizing-away <tt>isFunction</tt>.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1f" d:title="1.5.0"><d:index d:value="1.5.0" d:title="1.5.0"/><h1>1.5.0</h1><p id="1.5.0">
        <b class="header">1.5.0</b>  <small><i>July 6, 2013</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.4.4...1.5.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.5.0/index.html">Docs</a><br/>
        <ul>
          <li>
            Added a new <tt>unzip</tt> function, as the inverse of <tt>_.zip</tt>.
          </li>
          <li>
            The <tt>throttle</tt> function now takes an <tt>options</tt> argument,
            allowing you to disable execution of the throttled function on either
            the <b>leading</b> or <b>trailing</b> edge.
          </li>
          <li>
            A source map is now supplied for easier debugging of the minified
            production build of Underscore.
          </li>
          <li>
            The <tt>defaults</tt> function now only overrides <tt>undefined</tt>
            values, not <tt>null</tt> ones.
          </li>
          <li>
            Removed the ability to call <tt>_.bindAll</tt> with no method name
            arguments. It's pretty much always wiser to white-list the names of
            the methods you'd like to bind.
          </li>
          <li>
            Removed the ability to call <tt>_.after</tt> with an invocation count
            of zero. The minimum number of calls is (naturally) now <tt>1</tt>.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1g" d:title="1.5.1"><d:index d:value="1.5.1" d:title="1.5.1"/><h1>1.5.1</h1><p id="1.5.1">
        <b class="header">1.5.1</b>  <small><i>July 8, 2013</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.5.0...1.5.1">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.5.1/index.html">Docs</a><br/>
        <ul>
          <li>
            Removed <tt>unzip</tt>, as it's simply the application of <tt>zip</tt>
            to an array of arguments. Use <tt>_.zip.apply(_, list)</tt> to
            transpose instead.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1h" d:title="1.5.2"><d:index d:value="1.5.2" d:title="1.5.2"/><h1>1.5.2</h1><p id="1.5.2">
        <b class="header">1.5.2</b>  <small><i>September 7, 2013</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.5.1...1.5.2">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.5.2/index.html">Docs</a><br/>
        <ul>
          <li>
            Added an <tt>indexBy</tt> function, which fits in alongside its
            cousins, <tt>countBy</tt> and <tt>groupBy</tt>.
          </li>
          <li>
            Added a <tt>sample</tt> function, for sampling random elements from
            arrays.
          </li>
          <li>
            Some optimizations relating to functions that can be implemented
            in terms of <tt>_.keys</tt> (which includes, significantly,
            <tt>each</tt> on objects). Also for <tt>debounce</tt> in a tight loop.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1i" d:title="1.6.0"><d:index d:value="1.6.0" d:title="1.6.0"/><h1>1.6.0</h1><p id="1.6.0">
        <b class="header">1.6.0</b>  <small><i>February 10, 2014</i></small>  <a href="https://github.com/jashkenas/underscore/compare/1.5.2...1.6.0">Diff</a>  <a href="http://htmlpreview.github.io/?https://raw.github.com/jashkenas/underscore/1.6.0/index.html">Docs</a><br/>
        <ul>
          <li>
            Underscore now registers itself for AMD (Require.js), Bower and Component,
            as well as being a CommonJS module and a regular (Java)Script. 
            An ugliness, but perhaps a necessary one.
          </li>
          <li>
            Added <tt>_.partition</tt>, a way to split a collection into two lists
            of results — those that pass and those that fail a particular predicate.
          </li>
          <li>
            Added <tt>_.property</tt>, for easy creation of iterators that pull
            specific properties from objects. Useful in conjunction with other
            Underscore collection functions.
          </li>
          <li>
            Added <tt>_.matches</tt>, a function that will give you a predicate
            that can be used to tell if a given object matches a list of specified
            key/value properties.
          </li>
          <li>
            Added <tt>_.constant</tt>, as a higher-order <tt>_.identity</tt>.
          </li>
          <li>
            Added <tt>_.now</tt>, an optimized way to get a timestamp  used
            internally to speed up <tt>debounce</tt> and <tt>throttle</tt>.
          </li>
          <li>
            The <tt>_.partial</tt> function may now be used to partially apply
            any of its arguments, by passing <tt>_</tt> wherever you'd like a 
            placeholder variable, to be filled-in later.
          </li>
          <li>
            The <tt>_.each</tt> function now returns the original iterated list 
            (just like it used to), for better chaining.
          </li>
          <li>
            The <tt>_.keys</tt> function now returns an empty array for
            non-objects instead of throwing.
          </li>
          <li>
             and more miscellaneous refactoring.
          </li>
        </ul>
      </p></d:entry>
<d:entry id="_1j" d:title="value"><d:index d:value="value" d:title="value"/><h1>value</h1><p id="value">
        <b class="header">value</b><code>_(obj).value()</code>
        <br/>
        Extracts the value of a wrapped object.
      </p>
      
<pre>
_([1, 2, 3]).value();
= [1, 2, 3]
</pre></d:entry>
<d:entry id="_1k" d:title="chain"><d:index d:value="chain" d:title="chain"/><h1>chain</h1><p id="chain">
        <b class="header">chain</b><code>_.chain(obj)</code>
        <br/>
        Returns a wrapped object. Calling methods on this object will continue
        to return wrapped objects until <tt>value</tt> is used.
      </p>
      
<pre>
var stooges = [{name: 'curly', age: 25}, {name: 'moe', age: 21}, {name: 'larry', age: 23}];
var youngest = _.chain(stooges)
  .sortBy(function(stooge){ return stooge.age; })
  .map(function(stooge){ return stooge.name + ' is ' + stooge.age; })
  .first()
  .value();
= "moe is 21"
</pre></d:entry>
<d:entry id="_1l" d:title="template"><d:index d:value="template" d:title="template"/><h1>template</h1><p id="template">
        <b class="header">template</b><code>_.template(templateString, [data], [settings])</code>
        <br/>
        Compiles JavaScript templates into functions that can be evaluated
        for rendering. Useful for rendering complicated bits of HTML from JSON
        data sources. Template functions can both interpolate variables, using
        <tt>%=  %</tt>, as well as execute arbitrary JavaScript code, with
        <tt>%  %</tt>. If you wish to interpolate a value, and have
        it be HTML-escaped, use <tt>%-  %</tt> When you evaluate a template function, pass in a
        <b>data</b> object that has properties corresponding to the template's free
        variables. If you're writing a one-off, you can pass the <b>data</b>
        object as the second parameter to <b>template</b> in order to render
        immediately instead of returning a template function.  The <b>settings</b> argument
        should be a hash containing any <tt>_.templateSettings</tt> that should be overridden.
      </p>

      
<pre>
var compiled = _.template("hello: %= name %");
compiled({name: 'moe'});
= "hello: moe"

var list = "% _.each(people, function(name) { % li%= name %/li % }); %";
_.template(list, {people: ['moe', 'curly', 'larry']});
= "limoe/lilicurly/lililarry/li"

var template = _.template("b%- value %/b");
template({value: 'script'});
= "blt;scriptgt;/b"</pre>

      
<p>
        You can also use <tt>print</tt> from within JavaScript code.  This is
        sometimes more convenient than using <tt>%= ... %</tt>.
      </p>

      
<pre>
var compiled = _.template("% print('Hello ' + epithet); %");
compiled({epithet: "stooge"});
= "Hello stooge"</pre>

      
<p>
        If ERB-style delimiters aren't your cup of tea, you can change Underscore's
        template settings to use different symbols to set off interpolated code.
        Define an <b>interpolate</b> regex to match expressions that should be
        interpolated verbatim, an <b>escape</b> regex to match expressions that should
        be inserted after being HTML escaped, and an <b>evaluate</b> regex to match
        expressions that should be evaluated without insertion into the resulting
        string. You may define or omit any combination of the three.
        For example, to perform
        <a href="https://github.com/janl/mustache.js#readme">Mustache.js</a>
        style templating:
      </p>

      
<pre>
_.templateSettings = {
  interpolate: /\{\{(.+?)\}\}/g
};

var template = _.template("Hello {{ name }}!");
template({name: "Mustache"});
= "Hello Mustache!"</pre>

      
<p>
        By default, <b>template</b> places the values from your data in the local scope
        via the <tt>with</tt> statement.  However, you can specify a single variable name
        with the <b>variable</b> setting. This can significantly improve the speed
        at which a template is able to render.
      </p>

      
<pre>
_.template("Using 'with': %= data.answer %&amp;gt;", {answer: 'no'}, {variable: 'data'});
= "Using 'with': no"</pre>

      
<p>
        Precompiling your templates can be a big help when debugging errors you can't
        reproduce.  This is because precompiled templates can provide line numbers and
        a stack trace, something that is not possible when compiling templates on the client.
        The <b>source</b> property is available on the compiled template
        function for easy precompilation.
      </p>

      
<pre>script
  JST.project = %= _.template(jstText).source %&amp;gt;;
/script</pre></d:entry>
<d:entry id="_1m" d:title="result"><d:index d:value="result" d:title="result"/><h1>result</h1><p id="result">
        <b class="header">result</b><code>_.result(object, property)</code>
        <br/>
        If the value of the named <b>property</b> is a function then invoke it
        with the <b>object</b> as context; otherwise, return it.
      </p>
      
<pre>
var object = {cheese: 'crumpets', stuff: function(){ return 'nonsense'; }};
_.result(object, 'cheese');
= "crumpets"
_.result(object, 'stuff');
= "nonsense"</pre></d:entry>
<d:entry id="_1n" d:title="unescape"><d:index d:value="unescape" d:title="unescape"/><h1>unescape</h1><p id="unescape">
        <b class="header">unescape</b><code>_.unescape(string)</code>
        <br/>
        The opposite of <a href="x-dictionary:d:escape"><b>escape</b></a>, replaces
        <tt>amp;</tt>, <tt>lt;</tt>, <tt>gt;</tt>,
        <tt>quot;</tt>, and <tt>#x27;</tt>
        with their unescaped counterparts.
      </p>
      
<pre>
_.unescape('Curly, Larry amp; Moe');
= "Curly, Larry  Moe"</pre></d:entry>
<d:entry id="_1o" d:title="escape"><d:index d:value="escape" d:title="escape"/><h1>escape</h1><p id="escape">
        <b class="header">escape</b><code>_.escape(string)</code>
        <br/>
        Escapes a string for insertion into HTML, replacing
        <tt/>, <tt/>, <tt/>, <tt/>, and <tt>'</tt> characters.
      </p>
      
<pre>
_.escape('Curly, Larry  Moe');
= "Curly, Larry amp; Moe"</pre></d:entry>
<d:entry id="_1p" d:title="uniqueId"><d:index d:value="uniqueId" d:title="uniqueId"/><h1>uniqueId</h1><p id="uniqueId">
        <b class="header">uniqueId</b><code>_.uniqueId([prefix])</code>
        <br/>
        Generate a globally-unique id for client-side models or DOM elements
        that need one. If <b>prefix</b> is passed, the id will be appended to it.
      </p>
      
<pre>
_.uniqueId('contact_');
= 'contact_104'</pre></d:entry>
<d:entry id="_1q" d:title="mixin"><d:index d:value="mixin" d:title="mixin"/><h1>mixin</h1><p id="mixin">
        <b class="header">mixin</b><code>_.mixin(object)</code>
        <br/>
        Allows you to extend Underscore with your own utility functions. Pass
        a hash of <tt>{name: function}</tt> definitions to have your functions
        added to the Underscore object, as well as the OOP wrapper.
      </p>
      
<pre>
_.mixin({
  capitalize: function(string) {
    return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
  }
});
_("fabio").capitalize();
= "Fabio"
</pre></d:entry>
<d:entry id="_1r" d:title="random"><d:index d:value="random" d:title="random"/><h1>random</h1><p id="random">
        <b class="header">random</b><code>_.random(min, max)</code>
        <br/>
        Returns a random integer between <b>min</b> and <b>max</b>, inclusive.
        If you only pass one argument, it will return a number between <tt>0</tt>
        and that number.
      </p>
      
<pre>
_.random(0, 100);
= 42</pre></d:entry>
<d:entry id="_1s" d:title="times"><d:index d:value="times" d:title="times"/><h1>times</h1><p id="times">
        <b class="header">times</b><code>_.times(n, iterator, [context])</code>
        <br/>
        Invokes the given iterator function <b>n</b> times. Each invocation of
        <b>iterator</b> is called with an <tt>index</tt> argument. Produces an
        array of the returned values.
        <br/>
        <i>Note: this example uses the <a href="x-dictionary:d:chaining">chaining syntax</a></i>.
      </p>
      
<pre>
_(
3).times(function(n){ genie.grantWishNumber(n); });</pre></d:entry>
<d:entry id="_1t" d:title="constant"><d:index d:value="constant" d:title="constant"/><h1>constant</h1><p id="constant">
        <b class="header">constant</b><code>_.constant(value)</code>
        <br/>
        Creates a function that returns the same value that is used as the 
        argument of <tt>_.constant</tt>.
      </p>
      
<pre>
var moe = {name: 'moe'};
moe === _.constant(moe)();
= true</pre></d:entry>
<d:entry id="_1u" d:title="identity"><d:index d:value="identity" d:title="identity"/><h1>identity</h1><p id="identity">
        <b class="header">identity</b><code>_.identity(value)</code>
        <br/>
        Returns the same value that is used as the argument. In math:
        <tt>f(x) = x</tt><br/>
        This function looks useless, but is used throughout Underscore as
        a default iterator.
      </p>
      
<pre>
var moe = {name: 'moe'};
moe === _.identity(moe);
= true</pre></d:entry>
<d:entry id="_1v" d:title="noConflict"><d:index d:value="noConflict" d:title="noConflict"/><h1>noConflict</h1><p id="noConflict">
        <b class="header">noConflict</b><code>_.noConflict()</code>
        <br/>
        Give control of the "_" variable back to its previous owner. Returns
        a reference to the <b>Underscore</b> object.
      </p>
      
<pre>
var underscore = _.noConflict();</pre></d:entry>
<d:entry id="_1w" d:title="isUndefined"><d:index d:value="isUndefined" d:title="isUndefined"/><h1>isUndefined</h1><p id="isUndefined">
        <b class="header">isUndefined</b><code>_.isUndefined(value)</code>
        <br/>
        Returns <i>true</i> if <b>value</b> is <i>undefined</i>.
      </p>
      
<pre>
_.isUndefined(window.missingVariable);
= true
</pre></d:entry>
<d:entry id="_1x" d:title="isNull"><d:index d:value="isNull" d:title="isNull"/><h1>isNull</h1><p id="isNull">
        <b class="header">isNull</b><code>_.isNull(object)</code>
        <br/>
        Returns <i>true</i> if the value of <b>object</b> is <i>null</i>.
      </p>
      
<pre>
_.isNull(null);
= true
_.isNull(undefined);
= false
</pre></d:entry>
<d:entry id="_1y" d:title="isNaN"><d:index d:value="isNaN" d:title="isNaN"/><h1>isNaN</h1><p id="isNaN">
        <b class="header">isNaN</b><code>_.isNaN(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is <i>NaN</i>.<br/> Note: this is not
        the same as the native <b>isNaN</b> function, which will also return
        true for many other not-number values, such as <tt>undefined</tt>.
      </p>
      
<pre>
_.isNaN(NaN);
= true
isNaN(undefined);
= true
_.isNaN(undefined);
= false
</pre></d:entry>
<d:entry id="_1z" d:title="isRegExp"><d:index d:value="isRegExp" d:title="isRegExp"/><h1>isRegExp</h1><p id="isRegExp">
        <b class="header">isRegExp</b><code>_.isRegExp(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is a RegExp.
      </p>
      
<pre>
_.isRegExp(/moe/);
= true
</pre></d:entry>
<d:entry id="_20" d:title="isDate"><d:index d:value="isDate" d:title="isDate"/><h1>isDate</h1><p id="isDate">
        <b class="header">isDate</b><code>_.isDate(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is a Date.
      </p>
      
<pre>
_.isDate(new Date());
= true
</pre></d:entry>
<d:entry id="_21" d:title="isBoolean"><d:index d:value="isBoolean" d:title="isBoolean"/><h1>isBoolean</h1><p id="isBoolean">
        <b class="header">isBoolean</b><code>_.isBoolean(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is either <i>true</i> or <i>false</i>.
      </p>
      
<pre>
_.isBoolean(null);
= false
</pre></d:entry>
<d:entry id="_22" d:title="isFinite"><d:index d:value="isFinite" d:title="isFinite"/><h1>isFinite</h1><p id="isFinite">
        <b class="header">isFinite</b><code>_.isFinite(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is a finite Number.
      </p>
      
<pre>
_.isFinite(-101);
= true

_.isFinite(-Infinity);
= false
</pre></d:entry>
<d:entry id="_23" d:title="isNumber"><d:index d:value="isNumber" d:title="isNumber"/><h1>isNumber</h1><p id="isNumber">
        <b class="header">isNumber</b><code>_.isNumber(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is a Number (including <tt>NaN</tt>).
      </p>
      
<pre>
_.isNumber(8.4 * 
5);
= true
</pre></d:entry>
<d:entry id="_24" d:title="isString"><d:index d:value="isString" d:title="isString"/><h1>isString</h1><p id="isString">
        <b class="header">isString</b><code>_.isString(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is a String.
      </p>
      
<pre>
_.isString("moe");
= true
</pre></d:entry>
<d:entry id="_25" d:title="isFunction"><d:index d:value="isFunction" d:title="isFunction"/><h1>isFunction</h1><p id="isFunction">
        <b class="header">isFunction</b><code>_.isFunction(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is a Function.
      </p>
      
<pre>
_.isFunction(alert);
= true
</pre></d:entry>
<d:entry id="_26" d:title="isArguments"><d:index d:value="isArguments" d:title="isArguments"/><h1>isArguments</h1><p id="isArguments">
        <b class="header">isArguments</b><code>_.isArguments(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is an Arguments object.
      </p>
      
<pre>
(function(){ return _.isArguments(arguments); })(1, 2, 
3);
= true
_.isArguments([1,2,3]);
= false
</pre></d:entry>
<d:entry id="_27" d:title="isObject"><d:index d:value="isObject" d:title="isObject"/><h1>isObject</h1><p id="isObject">
        <b class="header">isObject</b><code>_.isObject(value)</code>
        <br/>
        Returns <i>true</i> if <b>value</b> is an Object. Note that JavaScript
        arrays and functions are objects, while (normal) strings and numbers are not.
      </p>
      
<pre>
_.isObject({});
= true
_.isObject(1);
= false
</pre></d:entry>
<d:entry id="_28" d:title="isArray"><d:index d:value="isArray" d:title="isArray"/><h1>isArray</h1><p id="isArray">
        <b class="header">isArray</b><code>_.isArray(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is an Array.
      </p>
      
<pre>
(function(){ return _.isArray(arguments); })();
= false
_.isArray([1,2,3]);
= true
</pre></d:entry>
<d:entry id="_29" d:title="isElement"><d:index d:value="isElement" d:title="isElement"/><h1>isElement</h1><p id="isElement">
        <b class="header">isElement</b><code>_.isElement(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> is a DOM element.
      </p>
      
<pre>
_.isElement(jQuery('body')[0]);
= true
</pre></d:entry>
<d:entry id="_2a" d:title="isEmpty"><d:index d:value="isEmpty" d:title="isEmpty"/><h1>isEmpty</h1><p id="isEmpty">
        <b class="header">isEmpty</b><code>_.isEmpty(object)</code>
        <br/>
        Returns <i>true</i> if <b>object</b> contains no values
        (no enumerable own-properties).
      </p>
      
<pre>
_.isEmpty([1, 2, 3]);
= false
_.isEmpty({});
= true
</pre></d:entry>
<d:entry id="_2b" d:title="isEqual"><d:index d:value="isEqual" d:title="isEqual"/><h1>isEqual</h1><p id="isEqual">
        <b class="header">isEqual</b><code>_.isEqual(object, other)</code>
        <br/>
        Performs an optimized deep comparison between the two objects, to determine
        if they should be considered equal.
      </p>
      
<pre>
var moe   = {name: 'moe', luckyNumbers: [13, 27, 34]};
var clone = {name: 'moe', luckyNumbers: [13, 27, 34]};
moe == clone;
= false
_.isEqual(moe, clone);
= true
</pre></d:entry>
<d:entry id="_2c" d:title="matches"><d:index d:value="matches" d:title="matches"/><h1>matches</h1><p id="matches">
        <b class="header">matches</b><code>_.matches(attrs)</code>
        <br/>
        Returns a predicate function that will tell you if a passed in object
        contains all of the key/value properties present in <b>attrs</b>.
      </p>
      
<pre>
var ready = _.matches({selected: true, visible: true});
var readyToGoList = _.filter(list, ready);</pre></d:entry>
<d:entry id="_2d" d:title="property"><d:index d:value="property" d:title="property"/><h1>property</h1><p id="property">
        <b class="header">property</b><code>_.property(key)</code>
        <br/>
        Returns a function that will itself return the <tt>key</tt>
        property of any passed-in object.
      </p>
      
<pre>
var moe = {name: 'moe'};
'moe' === _.property('name')(moe);
= true</pre></d:entry>
<d:entry id="_2e" d:title="has"><d:index d:value="has" d:title="has"/><h1>has</h1><p id="has">
        <b class="header">has</b><code>_.has(object, key)</code>
        <br/>
        Does the object contain the given key? Identical to
        <tt>object.hasOwnProperty(key)</tt>, but uses a safe reference to the
        <tt>hasOwnProperty</tt> function, in case it's been
        <a href="http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/">overridden accidentally</a>.
      </p>
      
<pre>
_.has({a: 1, b: 2, c: 3}, "b");
= true
</pre></d:entry>
<d:entry id="_2f" d:title="tap"><d:index d:value="tap" d:title="tap"/><h1>tap</h1><p id="tap">
        <b class="header">tap</b><code>_.tap(object, interceptor)</code>
        <br/>
        Invokes <b>interceptor</b> with the <b>object</b>, and then returns <b>object</b>.
        The primary purpose of this method is to "tap into" a method chain, in order to perform operations on intermediate results within the chain.
      </p>
      
<pre>
_.chain([1,2,3,200])
  .filter(function(num) { return num % 2 == 0; })
  .tap(alert)
  .map(function(num) { return num * num })
  .value();
= // [2, 200] (alerted)
= [4, 40000]
</pre></d:entry>
<d:entry id="_2g" d:title="clone"><d:index d:value="clone" d:title="clone"/><h1>clone</h1><p id="clone">
        <b class="header">clone</b><code>_.clone(object)</code>
        <br/>
        Create a shallow-copied clone of the <b>object</b>. Any nested objects
        or arrays will be copied by reference, not duplicated.
      </p>
      
<pre>
_.clone({name: 'moe'});
= {name: 'moe'};
</pre></d:entry>
<d:entry id="_2h" d:title="defaults"><d:index d:value="defaults" d:title="defaults"/><h1>defaults</h1><p id="defaults">
        <b class="header">defaults</b><code>_.defaults(object, *defaults)</code>
        <br/>
        Fill in <tt>undefined</tt> properties in <b>object</b> with values from the
        <b>defaults</b> objects, and return the <b>object</b>. As soon as the
        property is filled, further defaults will have no effect.
      </p>
      
<pre>
var iceCream = {flavor: "chocolate"};
_.defaults(iceCream, {flavor: "vanilla", sprinkles: "lots"});
= {flavor: "chocolate", sprinkles: "lots"}
</pre></d:entry>
<d:entry id="_2i" d:title="omit"><d:index d:value="omit" d:title="omit"/><h1>omit</h1><p id="omit">
        <b class="header">omit</b><code>_.omit(object, *keys)</code>
        <br/>
        Return a copy of the <b>object</b>, filtered to omit the blacklisted
        <b>keys</b> (or array of keys).
      </p>
      
<pre>
_.omit({name: 'moe', age: 50, userid: 'moe1'}, 'userid');
= {name: 'moe', age: 50}
</pre></d:entry>
<d:entry id="_2j" d:title="pick"><d:index d:value="pick" d:title="pick"/><h1>pick</h1><p id="pick">
        <b class="header">pick</b><code>_.pick(object, *keys)</code>
        <br/>
        Return a copy of the <b>object</b>, filtered to only have values for
        the whitelisted <b>keys</b> (or array of valid keys).
      </p>
      
<pre>
_.pick({name: 'moe', age: 50, userid: 'moe1'}, 'name', 'age');
= {name: 'moe', age: 50}
</pre></d:entry>
<d:entry id="_2k" d:title="extend"><d:index d:value="extend" d:title="extend"/><h1>extend</h1><p id="extend">
        <b class="header">extend</b><code>_.extend(destination, *sources)</code>
        <br/>
        Copy all of the properties in the <b>source</b> objects over to the
        <b>destination</b> object, and return the <b>destination</b> object.
        It's in-order, so the last source will override properties of the same
        name in previous arguments.
      </p>
      
<pre>
_.extend({name: 'moe'}, {age: 50});
= {name: 'moe', age: 50}
</pre></d:entry>
<d:entry id="_2l" d:title="functions"><d:index d:value="functions" d:title="functions"/><h1>functions</h1><p id="object-functions">
        <b class="header">functions</b><code>_.functions(object)</code>
        <span class="alias">Alias: <b>methods</b></span>
        <br/>
        Returns a sorted list of the names of every method in an object 
        that is to say, the name of every function property of the object.
      </p>
      
<pre>
_.functions(_);
= ["all", "any", "bind", "bindAll", "clone", "compact", "compose" ...
</pre></d:entry>
<d:entry id="_2m" d:title="invert"><d:index d:value="invert" d:title="invert"/><h1>invert</h1><p id="invert">
        <b class="header">invert</b><code>_.invert(object)</code>
        <br/>
        Returns a copy of the <b>object</b> where the keys have become the values
        and the values the keys. For this to work, all of your object's values
        should be unique and string serializable.
      </p>
      
<pre>
_.invert({Moe: "Moses", Larry: "Louis", Curly: "Jerome"});
= {Moses: "Moe", Louis: "Larry", Jerome: "Curly"};
</pre></d:entry>
<d:entry id="_2n" d:title="pairs"><d:index d:value="pairs" d:title="pairs"/><h1>pairs</h1><p id="pairs">
        <b class="header">pairs</b><code>_.pairs(object)</code>
        <br/>
        Convert an object into a list of <tt>[key, value]</tt> pairs.
      </p>
      
<pre>
_.pairs({one: 1, two: 2, three: 3});
= [["one", 1], ["two", 2], ["three", 3]]
</pre></d:entry>
<d:entry id="_2o" d:title="values"><d:index d:value="values" d:title="values"/><h1>values</h1><p id="values">
        <b class="header">values</b><code>_.values(object)</code>
        <br/>
        Return all of the values of the <b>object</b>'s properties.
      </p>
      
<pre>
_.values({one: 1, two: 2, three: 3});
= [1, 2, 3]
</pre></d:entry>
<d:entry id="_2p" d:title="keys"><d:index d:value="keys" d:title="keys"/><h1>keys</h1><p id="keys">
        <b class="header">keys</b><code>_.keys(object)</code>
        <br/>
        Retrieve all the names of the <b>object</b>'s properties.
      </p>
      
<pre>
_.keys({one: 1, two: 2, three: 3});
= ["one", "two", "three"]
</pre></d:entry>
<d:entry id="_2q" d:title="compose"><d:index d:value="compose" d:title="compose"/><h1>compose</h1><p id="compose">
        <b class="header">compose</b><code>_.compose(*functions)</code>
        <br/>
        Returns the composition of a list of <b>functions</b>, where each function
        consumes the return value of the function that follows. In math terms,
        composing the functions <i>f()</i>, <i>g()</i>, and <i>h()</i> produces
        <i>f(g(h()))</i>.
      </p>
      
<pre>
var greet    = function(name){ return "hi: " + name; };
var exclaim  = function(statement){ return statement.toUpperCase() + "!"; };
var welcome = _.compose(greet, exclaim);
welcome('moe');
= 'hi: MOE!'
</pre></d:entry>
<d:entry id="_2r" d:title="wrap"><d:index d:value="wrap" d:title="wrap"/><h1>wrap</h1><p id="wrap">
        <b class="header">wrap</b><code>_.wrap(function, wrapper)</code>
        <br/>
        Wraps the first <b>function</b> inside of the <b>wrapper</b> function,
        passing it as the first argument. This allows the <b>wrapper</b> to
        execute code before and after the <b>function</b> runs, adjust the arguments,
        and execute it conditionally.
      </p>
      
<pre>
var hello = function(name) { return "hello: " + name; };
hello = _.wrap(hello, function(func) {
  return "before, " + func("moe") + ", after";
});
hello();
= 'before, hello: moe, after'
</pre></d:entry>
<d:entry id="_2s" d:title="now"><d:index d:value="now" d:title="now"/><h1>now</h1><p id="now">
        <b class="header">now</b><code>_.now()</code>
        <br/>
        Returns an integer timestamp for the current time, using the fastest
        method available in the runtime. Useful for implementing timing/animation
        functions.
      </p>
      
<pre>
_.now();
= 1392066795351
</pre></d:entry>
<d:entry id="_2t" d:title="after"><d:index d:value="after" d:title="after"/><h1>after</h1><p id="after">
        <b class="header">after</b><code>_.after(count, function)</code>
        <br/>
        Creates a version of the function that will only be run after first
        being called <b>count</b> times. Useful for grouping asynchronous responses,
        where you want to be sure that all the async calls have finished, before
        proceeding.
      </p>
      
<pre>
var renderNotes = _.after(notes.length, render);
_.each(notes, function(note) {
  note.asyncSave({success: renderNotes});
});
// renderNotes is run once, after all notes have saved.
</pre></d:entry>
<d:entry id="_2u" d:title="once"><d:index d:value="once" d:title="once"/><h1>once</h1><p id="once">
        <b class="header">once</b><code>_.once(function)</code>
        <br/>
        Creates a version of the function that can only be called one time.
        Repeated calls to the modified function will have no effect, returning
        the value from the original call. Useful for initialization functions,
        instead of having to set a boolean flag and then check it later.
      </p>
      
<pre>
var initialize = _.once(createApplication);
initialize();
initialize();
// Application is only created once.
</pre></d:entry>
<d:entry id="_2v" d:title="debounce"><d:index d:value="debounce" d:title="debounce"/><h1>debounce</h1><p id="debounce">
        <b class="header">debounce</b><code>_.debounce(function, wait, [immediate])</code>
        <br/>
        Creates and returns a new debounced version of the passed function which
        will postpone its execution until after
        <b>wait</b> milliseconds have elapsed since the last time it
        was invoked. Useful for implementing behavior that should only happen
        <i>after</i> the input has stopped arriving. For example: rendering a
        preview of a Markdown comment, recalculating a layout after the window
        has stopped being resized, and so on.
      </p>

      
<p>
        Pass <tt>true</tt> for the <b>immediate</b> parameter to cause
        <b>debounce</b> to trigger the function on the leading instead of the
        trailing edge of the <b>wait</b> interval. Useful in circumstances like
        preventing accidental double-clicks on a "submit" button from firing a
        second time.
      </p>

      
<pre>
var lazyLayout = _.debounce(calculateLayout, 300);
$(window).resize(lazyLayout);
</pre></d:entry>
<d:entry id="_2w" d:title="throttle"><d:index d:value="throttle" d:title="throttle"/><h1>throttle</h1><p id="throttle">
        <b class="header">throttle</b><code>_.throttle(function, wait, [options])</code>
        <br/>
        Creates and returns a new, throttled version of the passed function,
        that, when invoked repeatedly, will only actually call the original function
        at most once per every <b>wait</b>
        milliseconds. Useful for rate-limiting events that occur faster than you
        can keep up with.
      </p>
      
<p>
        By default, <b>throttle</b> will execute the function as soon as you call it
        for the first time, and, if you call it again any number of times
        during the <b>wait</b> period, as soon as that period is over.
        If you'd like to disable the leading-edge
        call, pass <tt>{leading: false}</tt>, and if you'd like to disable the
        execution on the trailing-edge, pass <br/> <tt>{trailing: false}</tt>.
      </p>
      
<pre>
var throttled = _.throttle(updatePosition, 100);
$(window).scroll(throttled);
</pre></d:entry>
<d:entry id="_2x" d:title="defer"><d:index d:value="defer" d:title="defer"/><h1>defer</h1><p id="defer">
        <b class="header">defer</b><code>_.defer(function, *arguments)</code>
        <br/>
        Defers invoking the <b>function</b> until the current call stack has cleared,
        similar to using <b>setTimeout</b> with a delay of 0. Useful for performing
        expensive computations or HTML rendering in chunks without blocking the UI thread
        from updating. If you pass the optional <b>arguments</b>, they will be
        forwarded on to the <b>function</b> when it is invoked.
      </p>
      
<pre>
_.defer(function(){ alert('deferred'); });
// Returns from the function before the alert runs.
</pre></d:entry>
<d:entry id="_2y" d:title="delay"><d:index d:value="delay" d:title="delay"/><h1>delay</h1><p id="delay">
        <b class="header">delay</b><code>_.delay(function, wait, *arguments)</code>
        <br/>
        Much like <b>setTimeout</b>, invokes <b>function</b> after <b>wait</b>
        milliseconds. If you pass the optional <b>arguments</b>, they will be
        forwarded on to the <b>function</b> when it is invoked.
      </p>
      
<pre>
var log = _.bind(console.log, console);
_.delay(log, 1000, 'logged later');
= 'logged later' // Appears after one second.
</pre></d:entry>
<d:entry id="_2z" d:title="memoize"><d:index d:value="memoize" d:title="memoize"/><h1>memoize</h1><p id="memoize">
        <b class="header">memoize</b><code>_.memoize(function, [hashFunction])</code>
        <br/>
        Memoizes a given <b>function</b> by caching the computed result. Useful
        for speeding up slow-running computations. If passed an optional
        <b>hashFunction</b>, it will be used to compute the hash key for storing
        the result, based on the arguments to the original function. The default
        <b>hashFunction</b> just uses the first argument to the memoized function
        as the key.
      </p>
      
<pre>
var fibonacci = _.memoize(function(n) {
  return n  2 ? n: fibonacci(n - 1) + fibonacci(n - 
2);
});
</pre></d:entry>
<d:entry id="_30" d:title="partial"><d:index d:value="partial" d:title="partial"/><h1>partial</h1><p id="partial">
        <b class="header">partial</b><code>_.partial(function, *arguments)</code>
        <br/>
        Partially apply a function by filling in any number of its <b>arguments</b>,
        <i>without</i> changing its dynamic <tt>this</tt> value. A close cousin
        of <a href="x-dictionary:d:bind">bind</a>. You may pass <tt>_</tt> in your list of 
        <b>arguments</b> to specify an argument that should not be pre-filled, but
        left open to supply at call-time.
      </p>
      
<pre>
var add = function(a, b) { return a + b; };
add5 = _.partial(add, 
5);
add5(
10);
= 15
</pre></d:entry>
<d:entry id="_31" d:title="bindAll"><d:index d:value="bindAll" d:title="bindAll"/><h1>bindAll</h1><p id="bindAll">
        <b class="header">bindAll</b><code>_.bindAll(object, *methodNames)</code>
        <br/>
        Binds a number of methods on the <b>object</b>, specified by
        <b>methodNames</b>, to be run in the context of that object whenever they
        are invoked. Very handy for binding functions that are going to be used
        as event handlers, which would otherwise be invoked with a fairly useless
        <i>this</i>. <b>methodNames</b> are required.
      </p>
      
<pre>
var buttonView = {
  label  : 'underscore',
  onClick: function(){ alert('clicked: ' + this.label); },
  onHover: function(){ console.log('hovering: ' + this.label); }
};
_.bindAll(buttonView, 'onClick', 'onHover');
// When the button is clicked, this.label will have the correct value.
jQuery('#underscore_button').bind('click', buttonView.onClick);
</pre></d:entry>
<d:entry id="_32" d:title="bind"><d:index d:value="bind" d:title="bind"/><h1>bind</h1><p id="bind">
        <b class="header">bind</b><code>_.bind(function, object, *arguments)</code>
        <br/>
        Bind a <b>function</b> to an <b>object</b>, meaning that whenever
        the function is called, the value of <i>this</i> will be the <b>object</b>.
        Optionally, pass <b>arguments</b> to the <b>function</b> to pre-fill them,
        also known as <b>partial application</b>.
      </p>
      
<pre>
var func = function(greeting){ return greeting + ': ' + this.name };
func = _.bind(func, {name: 'moe'}, 'hi');
func();
= 'hi: moe'
</pre></d:entry>
<d:entry id="_33" d:title="range"><d:index d:value="range" d:title="range"/><h1>range</h1><p id="range">
        <b class="header">range</b><code>_.range([start], stop, [step])</code>
        <br/>
        A function to create flexibly-numbered lists of integers, handy for
        <tt>each</tt> and <tt>map</tt> loops. <b>start</b>, if omitted, defaults
        to <i>0</i>; <b>step</b> defaults to <i>1</i>. Returns a list of integers
        from <b>start</b> to <b>stop</b>, incremented (or decremented) by <b>step</b>,
        exclusive. Note that ranges that <b>stop</b> before they <b>start</b>
        are considered to be zero-length instead of negative — if you'd like a
        negative range, use a negative <b>step</b>.
      </p>
      
<pre>
_.range(
10);
= [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
_.range(1, 
11);
= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
_.range(0, 30, 
5);
= [0, 5, 10, 15, 20, 25]
_.range(0, -10, -1);
= [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
_.range(0);
= []
</pre></d:entry>
<d:entry id="_34" d:title="sortedIndex"><d:index d:value="sortedIndex" d:title="sortedIndex"/><h1>sortedIndex</h1><p id="sortedIndex">
        <b class="header">sortedIndex</b><code>_.sortedIndex(list, value, [iterator], [context])</code>
        <br/>
        Uses a binary search to determine the index at which the <b>value</b>
        <i>should</i> be inserted into the <b>list</b> in order to maintain the <b>list</b>'s
        sorted order. If an <b>iterator</b> function is provided, it will be used to compute
        the sort ranking of each value, including the <b>value</b> you pass.
        Iterator may also be the string name of the property to sort by (eg. <tt>length</tt>).
      </p>
      
<pre>
_.sortedIndex([10, 20, 30, 40, 50], 
35);
= 3

var stooges = [{name: 'moe', age: 40}, {name: 'curly', age: 60}];
_.sortedIndex(stooges, {name: 'larry', age: 50}, 'age');
= 1
</pre></d:entry>
<d:entry id="_35" d:title="lastIndexOf"><d:index d:value="lastIndexOf" d:title="lastIndexOf"/><h1>lastIndexOf</h1><p id="lastIndexOf">
        <b class="header">lastIndexOf</b><code>_.lastIndexOf(array, value, [fromIndex])</code>
        <br/>
        Returns the index of the last occurrence of <b>value</b> in the <b>array</b>,
        or <i>-1</i> if value is not present. Uses the native <b>lastIndexOf</b>
        function if possible. Pass <b>fromIndex</b> to start your search at a
        given index.
      </p>
      
<pre>
_.lastIndexOf([1, 2, 3, 1, 2, 3], 
2);
= 4
</pre></d:entry>
<d:entry id="_36" d:title="indexOf"><d:index d:value="indexOf" d:title="indexOf"/><h1>indexOf</h1><p id="indexOf">
        <b class="header">indexOf</b><code>_.indexOf(array, value, [isSorted])</code>
        <br/>
        Returns the index at which <b>value</b> can be found in the <b>array</b>,
        or <i>-1</i> if value is not present in the <b>array</b>. Uses the native
        <b>indexOf</b> function unless it's missing. If you're working with a
        large array, and you know that the array is already sorted, pass <tt>true</tt>
        for <b>isSorted</b> to use a faster binary search ... or, pass a number as
        the third argument in order to look for the first matching value in the
        array after the given index.
      </p>
      
<pre>
_.indexOf([1, 2, 3], 
2);
= 1
</pre></d:entry>
<d:entry id="_37" d:title="object"><d:index d:value="object" d:title="object"/><h1>object</h1><p id="object">
        <b class="header">object</b><code>_.object(list, [values])</code>
        <br/>
        Converts arrays into objects. Pass either a single list of
        <tt>[key, value]</tt> pairs, or a list of keys, and a list of values.
        If duplicate keys exist, the last value wins.
      </p>
      
<pre>
_.object(['moe', 'larry', 'curly'], [30, 40, 50]);
= {moe: 30, larry: 40, curly: 50}

_.object([['moe', 30], ['larry', 40], ['curly', 50]]);
= {moe: 30, larry: 40, curly: 50}
</pre></d:entry>
<d:entry id="_38" d:title="zip"><d:index d:value="zip" d:title="zip"/><h1>zip</h1><p id="zip">
        <b class="header">zip</b><code>_.zip(*arrays)</code>
        <br/>
        Merges together the values of each of the <b>arrays</b> with the
        values at the corresponding position. Useful when you have separate
        data sources that are coordinated through matching array indexes.
        If you're working with a matrix of nested arrays, <tt>_.zip.apply</tt>
        can transpose the matrix in a similar fashion.
      </p>
      
<pre>
_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
= [["moe", 30, true], ["larry", 40, false], ["curly", 50, false]]

_.zip.apply(_, arrayOfRowsOfData);
= arrayOfColumnsOfData
</pre></d:entry>
<d:entry id="_39" d:title="uniq"><d:index d:value="uniq" d:title="uniq"/><h1>uniq</h1><p id="uniq">
        <b class="header">uniq</b><code>_.uniq(array, [isSorted], [iterator])</code>
        <span class="alias">Alias: <b>unique</b></span>
        <br/>
        Produces a duplicate-free version of the <b>array</b>, using <i>===</i> to test
        object equality. If you know in advance that the <b>array</b> is sorted,
        passing <i>true</i> for <b>isSorted</b> will run a much faster algorithm.
        If you want to compute unique items based on a transformation, pass an
        <b>iterator</b> function.
      </p>
      
<pre>
_.uniq([1, 2, 1, 3, 1, 4]);
= [1, 2, 3, 4]
</pre></d:entry>
<d:entry id="_3a" d:title="difference"><d:index d:value="difference" d:title="difference"/><h1>difference</h1><p id="difference">
        <b class="header">difference</b><code>_.difference(array, *others)</code>
        <br/>
        Similar to <b>without</b>, but returns the values from <b>array</b> that
        are not present in the <b>other</b> arrays.
      </p>
      
<pre>
_.difference([1, 2, 3, 4, 5], [5, 2, 10]);
= [1, 3, 4]
</pre></d:entry>
<d:entry id="_3b" d:title="intersection"><d:index d:value="intersection" d:title="intersection"/><h1>intersection</h1><p id="intersection">
        <b class="header">intersection</b><code>_.intersection(*arrays)</code>
        <br/>
        Computes the list of values that are the intersection of all the <b>arrays</b>.
        Each value in the result is present in each of the <b>arrays</b>.
      </p>
      
<pre>
_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
= [1, 2]
</pre></d:entry>
<d:entry id="_3c" d:title="union"><d:index d:value="union" d:title="union"/><h1>union</h1><p id="union">
        <b class="header">union</b><code>_.union(*arrays)</code>
        <br/>
        Computes the union of the passed-in <b>arrays</b>: the list of unique items,
        in order, that are present in one or more of the <b>arrays</b>.
      </p>
      
<pre>
_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
= [1, 2, 3, 101, 10]
</pre></d:entry>
<d:entry id="_3d" d:title="partition"><d:index d:value="partition" d:title="partition"/><h1>partition</h1><p id="partition">
        <b class="header">partition</b><code>_.partition(array, predicate)</code>
        <br/>
        Split <b>array</b> into two arrays: one whose elements all satisfy
        <b>predicate</b> and one whose elements all do not satisfy <b>predicate</b>.
      </p>
      
<pre>
_.partition([0, 1, 2, 3, 4, 5], isOdd);
= [[1, 3, 5], [0, 2, 4]]
</pre></d:entry>
<d:entry id="_3e" d:title="without"><d:index d:value="without" d:title="without"/><h1>without</h1><p id="without">
        <b class="header">without</b><code>_.without(array, *values)</code>
        <br/>
        Returns a copy of the <b>array</b> with all instances of the <b>values</b>
        removed.
      </p>
      
<pre>
_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
= [2, 3, 4]
</pre></d:entry>
<d:entry id="_3f" d:title="flatten"><d:index d:value="flatten" d:title="flatten"/><h1>flatten</h1><p id="flatten">
        <b class="header">flatten</b><code>_.flatten(array, [shallow])</code>
        <br/>
        Flattens a nested <b>array</b> (the nesting can be to any depth). If you
        pass <b>shallow</b>, the array will only be flattened a single level.
      </p>
      
<pre>
_.flatten([1, [2], [3, [[4]]]]);
= [1, 2, 3, 4];

_.flatten([1, [2], [3, [[4]]]], true);
= [1, 2, 3, [[4]]];
</pre></d:entry>
<d:entry id="_3g" d:title="compact"><d:index d:value="compact" d:title="compact"/><h1>compact</h1><p id="compact">
        <b class="header">compact</b><code>_.compact(array)</code>
        <br/>
        Returns a copy of the <b>array</b> with all falsy values removed.
        In JavaScript, <i>false</i>, <i>null</i>, <i>0</i>, <i>""</i>,
        <i>undefined</i> and <i>NaN</i> are all falsy.
      </p>
      
<pre>
_.compact([0, 1, false, 2, '', 3]);
= [1, 2, 3]
</pre></d:entry>
<d:entry id="_3h" d:title="rest"><d:index d:value="rest" d:title="rest"/><h1>rest</h1><p id="rest">
        <b class="header">rest</b><code>_.rest(array, [index])</code>
        <span class="alias">Alias: <b>tail, drop</b></span>
        <br/>
        Returns the <b>rest</b> of the elements in an array. Pass an <b>index</b>
        to return the values of the array from that index onward.
      </p>
      
<pre>
_.rest([5, 4, 3, 2, 1]);
= [4, 3, 2, 1]
</pre></d:entry>
<d:entry id="_3i" d:title="last"><d:index d:value="last" d:title="last"/><h1>last</h1><p id="last">
        <b class="header">last</b><code>_.last(array, [n])</code>
        <br/>
        Returns the last element of an <b>array</b>. Passing <b>n</b> will return
        the last <b>n</b> elements of the array.
      </p>
      
<pre>
_.last([5, 4, 3, 2, 1]);
= 1
</pre></d:entry>
<d:entry id="_3j" d:title="initial"><d:index d:value="initial" d:title="initial"/><h1>initial</h1><p id="initial">
        <b class="header">initial</b><code>_.initial(array, [n])</code>
        <br/>
        Returns everything but the last entry of the array. Especially useful on
        the arguments object. Pass <b>n</b> to exclude the last <b>n</b> elements
        from the result.
      </p>
      
<pre>
_.initial([5, 4, 3, 2, 1]);
= [5, 4, 3, 2]
</pre></d:entry>
<d:entry id="_3k" d:title="first"><d:index d:value="first" d:title="first"/><h1>first</h1><p id="first">
        <b class="header">first</b><code>_.first(array, [n])</code>
        <span class="alias">Alias: <b>head</b>, <b>take</b></span>
        <br/>
        Returns the first element of an <b>array</b>. Passing <b>n</b> will
        return the first <b>n</b> elements of the array.
      </p>
      
<pre>
_.first([5, 4, 3, 2, 1]);
= 5
</pre></d:entry>
<d:entry id="_3l" d:title="size"><d:index d:value="size" d:title="size"/><h1>size</h1><p id="size">
        <b class="header">size</b><code>_.size(list)</code>
        <br/>
        Return the number of values in the <b>list</b>.
      </p>
      
<pre>
_.size({one: 1, two: 2, three: 3});
= 3
</pre></d:entry>
<d:entry id="_3m" d:title="toArray"><d:index d:value="toArray" d:title="toArray"/><h1>toArray</h1><p id="toArray">
        <b class="header">toArray</b><code>_.toArray(list)</code>
        <br/>
        Creates a real Array from the <b>list</b> (anything that can be
        iterated over).  Useful for transmuting the <b>arguments</b> object.
      </p>
      
<pre>
(function(){ return _.toArray(arguments).slice(1); })(1, 2, 3, 
4);
= [2, 3, 4]
</pre></d:entry>
<d:entry id="_3n" d:title="sample"><d:index d:value="sample" d:title="sample"/><h1>sample</h1><p id="sample">
        <b class="header">sample</b><code>_.sample(list, [n])</code>
        <br/>
        Produce a random sample from the <b>list</b>. Pass a number to
        return <b>n</b> random elements from the list. Otherwise a single random
        item will be returned.
      </p>
      
<pre>
_.sample([1, 2, 3, 4, 5, 6]);
= 4

_.sample([1, 2, 3, 4, 5, 6], 
3);
= [1, 6, 2]
</pre></d:entry>
<d:entry id="_3o" d:title="shuffle"><d:index d:value="shuffle" d:title="shuffle"/><h1>shuffle</h1><p id="shuffle">
        <b class="header">shuffle</b><code>_.shuffle(list)</code>
        <br/>
        Returns a shuffled copy of the <b>list</b>, using a version of the
        <a href="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">Fisher-Yates shuffle</a>.
      </p>
      
<pre>
_.shuffle([1, 2, 3, 4, 5, 6]);
= [4, 1, 6, 3, 5, 2]
</pre></d:entry>
<d:entry id="_3p" d:title="countBy"><d:index d:value="countBy" d:title="countBy"/><h1>countBy</h1><p id="countBy">
        <b class="header">countBy</b><code>_.countBy(list, iterator, [context])</code>
        <br/>
        Sorts a list into groups and returns a count for the number of objects
        in each group.
        Similar to <tt>groupBy</tt>, but instead of returning a list of values,
        returns a count for the number of values in that group.
      </p>
      
<pre>
_.countBy([1, 2, 3, 4, 5], function(num) {
  return num % 2 == 0 ? 'even': 'odd';
});
= {odd: 3, even: 2}
</pre></d:entry>
<d:entry id="_3q" d:title="indexBy"><d:index d:value="indexBy" d:title="indexBy"/><h1>indexBy</h1><p id="indexBy">
        <b class="header">indexBy</b><code>_.indexBy(list, iterator, [context])</code>
        <br/>
        Given a <b>list</b>, and an <b>iterator</b> function that returns a
        key for each element in the list (or a property name),
        returns an object with an index of each item.
        Just like <a href="x-dictionary:d:groupBy">groupBy</a>, but for when you know your
        keys are unique.
      </p>
      
<pre>
var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
_.indexBy(stooges, 'age');
= {
  "40": {name: 'moe', age: 40},
  "50": {name: 'larry', age: 50},
  "60": {name: 'curly', age: 60}
}
</pre></d:entry>
<d:entry id="_3r" d:title="groupBy"><d:index d:value="groupBy" d:title="groupBy"/><h1>groupBy</h1><p id="groupBy">
        <b class="header">groupBy</b><code>_.groupBy(list, iterator, [context])</code>
        <br/>
        Splits a collection into sets, grouped by the result of running each
        value through <b>iterator</b>. If <b>iterator</b> is a string instead of
        a function, groups by the property named by <b>iterator</b> on each of
        the values.
      </p>
      
<pre>
_.groupBy([1.3, 2.1, 2.4], function(num){ return Math.floor(num); });
= {1: [1.3], 2: [2.1, 2.4]}

_.groupBy(['one', 'two', 'three'], 'length');
= {3: ["one", "two"], 5: ["three"]}
</pre></d:entry>
<d:entry id="_3s" d:title="sortBy"><d:index d:value="sortBy" d:title="sortBy"/><h1>sortBy</h1><p id="sortBy">
        <b class="header">sortBy</b><code>_.sortBy(list, iterator, [context])</code>
        <br/>
        Returns a (stably) sorted copy of <b>list</b>, ranked in ascending
        order by the results of running each value through <b>iterator</b>.
        Iterator may also be the string name of the property to sort by (eg.
        <tt>length</tt>).
      </p>
      
<pre>
_.sortBy([1, 2, 3, 4, 5, 6], function(num){ return Math.sin(num); });
= [5, 4, 6, 3, 1, 2]
</pre></d:entry>
<d:entry id="_3t" d:title="min"><d:index d:value="min" d:title="min"/><h1>min</h1><p id="min">
        <b class="header">min</b><code>_.min(list, [iterator], [context])</code>
        <br/>
        Returns the minimum value in <b>list</b>. If an <b>iterator</b>
        function is provided, it will be used on each value to generate the
        criterion by which the value is ranked.
      </p>
      
<pre>
var numbers = [10, 5, 100, 2, 1000];
_.min(numbers);
= 2
</pre></d:entry>
<d:entry id="_3u" d:title="max"><d:index d:value="max" d:title="max"/><h1>max</h1><p id="max">
        <b class="header">max</b><code>_.max(list, [iterator], [context])</code>
        <br/>
        Returns the maximum value in <b>list</b>. If an <b>iterator</b>
        function is provided, it will be used on each value to generate the
        criterion by which the value is ranked.
      </p>
      
<pre>
var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
_.max(stooges, function(stooge){ return stooge.age; });
= {name: 'curly', age: 60};
</pre></d:entry>
<d:entry id="_3v" d:title="pluck"><d:index d:value="pluck" d:title="pluck"/><h1>pluck</h1><p id="pluck">
        <b class="header">pluck</b><code>_.pluck(list, propertyName)</code>
        <br/>
        A convenient version of what is perhaps the most common use-case for
        <b>map</b>: extracting a list of property values.
      </p>
      
<pre>
var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
_.pluck(stooges, 'name');
= ["moe", "larry", "curly"]
</pre></d:entry>
<d:entry id="_3w" d:title="invoke"><d:index d:value="invoke" d:title="invoke"/><h1>invoke</h1><p id="invoke">
        <b class="header">invoke</b><code>_.invoke(list, methodName, *arguments)</code>
        <br/>
        Calls the method named by <b>methodName</b> on each value in the <b>list</b>.
        Any extra arguments passed to <b>invoke</b> will be forwarded on to the
        method invocation.
      </p>
      
<pre>
_.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
= [[1, 5, 7], [1, 2, 3]]
</pre></d:entry>
<d:entry id="_3x" d:title="contains"><d:index d:value="contains" d:title="contains"/><h1>contains</h1><p id="contains">
        <b class="header">contains</b><code>_.contains(list, value)</code>
        <span class="alias">Alias: <b>include</b></span>
        <br/>
        Returns <i>true</i> if the <b>value</b> is present in the <b>list</b>.
        Uses <b>indexOf</b> internally, if <b>list</b> is an Array.
      </p>
      
<pre>
_.contains([1, 2, 3], 
3);
= true
</pre></d:entry>
<d:entry id="_3y" d:title="some"><d:index d:value="some" d:title="some"/><h1>some</h1><p id="some">
        <b class="header">some</b><code>_.some(list, [predicate], [context])</code>
        <span class="alias">Alias: <b>any</b></span>
        <br/>
        Returns <i>true</i> if any of the values in the <b>list</b> pass the
        <b>predicate</b> truth test. Short-circuits and stops traversing the list
        if a true element is found. Delegates to the native method <b>some</b>,
        if present.
      </p>
      
<pre>
_.some([null, 0, 'yes', false]);
= true
</pre></d:entry>
<d:entry id="_3z" d:title="every"><d:index d:value="every" d:title="every"/><h1>every</h1><p id="every">
        <b class="header">every</b><code>_.every(list, [predicate], [context])</code>
        <span class="alias">Alias: <b>all</b></span>
        <br/>
        Returns <i>true</i> if all of the values in the <b>list</b> pass the <b>predicate</b>
        truth test. Delegates to the native method <b>every</b>, if present.
      </p>
      
<pre>
_.every([true, 1, null, 'yes'], _.identity);
= false
</pre></d:entry>
<d:entry id="_40" d:title="reject"><d:index d:value="reject" d:title="reject"/><h1>reject</h1><p id="reject">
        <b class="header">reject</b><code>_.reject(list, predicate, [context])</code>
        <br/>
        Returns the values in <b>list</b> without the elements that the truth
        test (<b>predicate</b>) passes. The opposite of <b>filter</b>.
      </p>
      
<pre>
var odds = _.reject([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
= [1, 3, 5]
</pre></d:entry>
<d:entry id="_41" d:title="findWhere"><d:index d:value="findWhere" d:title="findWhere"/><h1>findWhere</h1><p id="findWhere">
        <b class="header">findWhere</b><code>_.findWhere(list, properties)</code>
        <br/>
        Looks through the <b>list</b> and returns the <i>first</i> value that matches
        all of the key-value pairs listed in <b>properties</b>.
      </p>
      
<p>
        If no match is found, or if <b>list</b> is empty, <i>undefined</i> will be
        returned.
      </p>
      
<pre>
_.findWhere(publicServicePulitzers, {newsroom: "The New York Times"});
= {year: 1918, newsroom: "The New York Times",
  reason: "For its public service in publishing in full so many official reports,
  documents and speeches by European statesmen relating to the progress and
  conduct of the war."}
</pre></d:entry>
<d:entry id="_42" d:title="where"><d:index d:value="where" d:title="where"/><h1>where</h1><p id="where">
        <b class="header">where</b><code>_.where(list, properties)</code>
        <br/>
        Looks through each value in the <b>list</b>, returning an array of all
        the values that contain all of the key-value pairs listed in <b>properties</b>.
      </p>
      
<pre>
_.where(listOfPlays, {author: "Shakespeare", year: 1611});
= [{title: "Cymbeline", author: "Shakespeare", year: 1611},
    {title: "The Tempest", author: "Shakespeare", year: 1611}]
</pre></d:entry>
<d:entry id="_43" d:title="filter"><d:index d:value="filter" d:title="filter"/><h1>filter</h1><p id="filter">
        <b class="header">filter</b><code>_.filter(list, predicate, [context])</code>
        <span class="alias">Alias: <b>select</b></span>
        <br/>
        Looks through each value in the <b>list</b>, returning an array of all
        the values that pass a truth test (<b>predicate</b>). Delegates to the
        native <b>filter</b> method, if it exists.
      </p>
      
<pre>
var evens = _.filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
= [2, 4, 6]
</pre></d:entry>
<d:entry id="_44" d:title="find"><d:index d:value="find" d:title="find"/><h1>find</h1><p id="find">
        <b class="header">find</b><code>_.find(list, predicate, [context])</code>
        <span class="alias">Alias: <b>detect</b></span>
        <br/>
        Looks through each value in the <b>list</b>, returning the first one that
        passes a truth test (<b>predicate</b>), or <tt>undefined</tt> if no value
        passes the test. The function returns as
        soon as it finds an acceptable element, and doesn't traverse the
        entire list.
      </p>
      
<pre>
var even = _.find([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
= 2
</pre></d:entry>
<d:entry id="_45" d:title="reduceRight"><d:index d:value="reduceRight" d:title="reduceRight"/><h1>reduceRight</h1><p id="reduceRight">
        <b class="header">reduceRight</b><code>_.reduceRight(list, iterator, memo, [context])</code>
        <span class="alias">Alias: <b>foldr</b></span>
        <br/>
        The right-associative version of <b>reduce</b>. Delegates to the
        JavaScript 1.8 version of <b>reduceRight</b>, if it exists. <b>Foldr</b>
        is not as useful in JavaScript as it would be in a language with lazy
        evaluation.
      </p>
      
<pre>
var list = [[0, 1], [2, 3], [4, 5]];
var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
= [4, 5, 2, 3, 0, 1]
</pre></d:entry>
<d:entry id="_46" d:title="reduce"><d:index d:value="reduce" d:title="reduce"/><h1>reduce</h1><p id="reduce">
        <b class="header">reduce</b><code>_.reduce(list, iterator, memo, [context])</code>
        <span class="alias">Aliases: <b>inject, foldl</b></span>
        <br/>
        Also known as <b>inject</b> and <b>foldl</b>, <b>reduce</b> boils down a
        <b>list</b> of values into a single value. <b>Memo</b> is the initial state
        of the reduction, and each successive step of it should be returned by
        <b>iterator</b>. The iterator is passed four arguments: the <tt>memo</tt>,
        then the <tt>value</tt> and <tt>index</tt> (or key) of the iteration,
        and finally a reference to the entire <tt>list</tt>.
      </p>
      
<pre>
var sum = _.reduce([1, 2, 3], function(memo, num){ return memo + num; }, 0);
= 6
</pre></d:entry>
<d:entry id="_47" d:title="map"><d:index d:value="map" d:title="map"/><h1>map</h1><p id="map">
        <b class="header">map</b><code>_.map(list, iterator, [context])</code>
        <span class="alias">Alias: <b>collect</b></span>
        <br/>
        Produces a new array of values by mapping each value in <b>list</b>
        through a transformation function (<b>iterator</b>). If the native <b>map</b> method
        exists, it will be used instead. If <b>list</b> is a JavaScript object,
        <b>iterator</b>'s arguments will be <tt>(value, key, list)</tt>.
      </p>
      
<pre>
_.map([1, 2, 3], function(num){ return num * 3; });
= [3, 6, 9]
_.map({one: 1, two: 2, three: 3}, function(num, key){ return num * 3; });
= [3, 6, 9]</pre></d:entry>
<d:entry id="_48" d:title="each"><d:index d:value="each" d:title="each"/><h1>each</h1><p id="each">
        <b class="header">each</b><code>_.each(list, iterator, [context])</code>
        <span class="alias">Alias: <b>forEach</b></span>
        <br/>
        Iterates over a <b>list</b> of elements, yielding each in turn to an <b>iterator</b>
        function. The <b>iterator</b> is bound to the <b>context</b> object, if one is
        passed. Each invocation of <b>iterator</b> is called with three arguments:
        <tt>(element, index, list)</tt>. If <b>list</b> is a JavaScript object, <b>iterator</b>'s
        arguments will be <tt>(value, key, list)</tt>. Delegates to the native
        <b>forEach</b> function if it exists, and returns the original <b>list</b> for chaining.
      </p>
      
<pre>
_.each([1, 2, 3], alert);
= alerts each number in turn...
_.each({one: 1, two: 2, three: 3}, alert);
= alerts each number value in turn...</pre>

      
<p>
        <i>
          Note: Collection functions work on arrays, objects, and
          array-like objects such as</i> <tt>arguments</tt>, <tt>NodeList</tt><i>
          and similar. But it works by duck-typing, so avoid passing objects with
          a numeric <tt>length</tt> property. It's also good to note that an
          <tt>each</tt> loop cannot be broken out of — to break, use <b>_.find</b>
          instead.
        </i>
      </p></d:entry>
<d:entry id="_49" d:title="Chaining"><d:index d:value="Chaining" d:title="Chaining"/><h1>Chaining</h1><a class="toc_title" href="x-dictionary:d:chaining">
      Chaining
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:chain">chain</a></li>
      <li>- <a href="x-dictionary:d:value">value</a></li>
    </ul></d:entry>
<d:entry id="_4a" d:title="Utility"><d:index d:value="Utility" d:title="Utility"/><h1>Utility</h1><a class="toc_title" href="x-dictionary:d:utility">
      Utility
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:noConflict">noConflict</a></li>
      <li>- <a href="x-dictionary:d:identity">identity</a></li>
      <li>- <a href="x-dictionary:d:constant">constant</a></li>
      <li>- <a href="x-dictionary:d:times">times</a></li>
      <li>- <a href="x-dictionary:d:random">random</a></li>
      <li>- <a href="x-dictionary:d:mixin">mixin</a></li>
      <li>- <a href="x-dictionary:d:uniqueId">uniqueId</a></li>
      <li>- <a href="x-dictionary:d:escape">escape</a></li>
      <li>- <a href="x-dictionary:d:unescape">unescape</a></li>
      <li>- <a href="x-dictionary:d:result">result</a></li>
      <li>- <a href="x-dictionary:d:template">template</a></li>
    </ul></d:entry>
<d:entry id="_4b" d:title="Objects"><d:index d:value="Objects" d:title="Objects"/><h1>Objects</h1><a class="toc_title" href="x-dictionary:d:objects">
      Objects
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:keys">keys</a></li>
      <li>- <a href="x-dictionary:d:values">values</a></li>
      <li>- <a href="x-dictionary:d:pairs">pairs</a></li>
      <li>- <a href="x-dictionary:d:invert">invert</a></li>
      <li>- <a href="x-dictionary:d:object-functions">functions</a></li>
      <li>- <a href="x-dictionary:d:extend">extend</a></li>
      <li>- <a href="x-dictionary:d:pick">pick</a></li>
      <li>- <a href="x-dictionary:d:omit">omit</a></li>
      <li>- <a href="x-dictionary:d:defaults">defaults</a></li>
      <li>- <a href="x-dictionary:d:clone">clone</a></li>
      <li>- <a href="x-dictionary:d:tap">tap</a></li>
      <li>- <a href="x-dictionary:d:has">has</a></li>
      <li>- <a href="x-dictionary:d:matches">matches</a></li>
      <li>- <a href="x-dictionary:d:property">property</a></li>
      <li>- <a href="x-dictionary:d:isEqual">isEqual</a></li>
      <li>- <a href="x-dictionary:d:isEmpty">isEmpty</a></li>
      <li>- <a href="x-dictionary:d:isElement">isElement</a></li>
      <li>- <a href="x-dictionary:d:isArray">isArray</a></li>
      <li>- <a href="x-dictionary:d:isObject">isObject</a></li>
      <li>- <a href="x-dictionary:d:isArguments">isArguments</a></li>
      <li>- <a href="x-dictionary:d:isFunction">isFunction</a></li>
      <li>- <a href="x-dictionary:d:isString">isString</a></li>
      <li>- <a href="x-dictionary:d:isNumber">isNumber</a></li>
      <li>- <a href="x-dictionary:d:isFinite">isFinite</a></li>
      <li>- <a href="x-dictionary:d:isBoolean">isBoolean</a></li>
      <li>- <a href="x-dictionary:d:isDate">isDate</a></li>
      <li>- <a href="x-dictionary:d:isRegExp">isRegExp</a></li>
      <li>- <a href="x-dictionary:d:isNaN">isNaN</a></li>
      <li>- <a href="x-dictionary:d:isNull">isNull</a></li>
      <li>- <a href="x-dictionary:d:isUndefined">isUndefined</a></li>
    </ul></d:entry>
<d:entry id="_4c" d:title="Functions"><d:index d:value="Functions" d:title="Functions"/><h1>Functions</h1><a class="toc_title" href="x-dictionary:d:functions">
      Functions
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:bind">bind</a></li>
      <li>- <a href="x-dictionary:d:bindAll">bindAll</a></li>
      <li>- <a href="x-dictionary:d:partial">partial</a></li>
      <li>- <a href="x-dictionary:d:memoize">memoize</a></li>
      <li>- <a href="x-dictionary:d:delay">delay</a></li>
      <li>- <a href="x-dictionary:d:defer">defer</a></li>
      <li>- <a href="x-dictionary:d:throttle">throttle</a></li>
      <li>- <a href="x-dictionary:d:debounce">debounce</a></li>
      <li>- <a href="x-dictionary:d:once">once</a></li>
      <li>- <a href="x-dictionary:d:after">after</a></li>
      <li>- <a href="x-dictionary:d:now">now</a></li>
      <li>- <a href="x-dictionary:d:wrap">wrap</a></li>
      <li>- <a href="x-dictionary:d:compose">compose</a></li>
    </ul></d:entry>
<d:entry id="_4d" d:title="Arrays"><d:index d:value="Arrays" d:title="Arrays"/><h1>Arrays</h1><a class="toc_title" href="x-dictionary:d:arrays">
      Arrays
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:first">first</a></li>
      <li>- <a href="x-dictionary:d:initial">initial</a></li>
      <li>- <a href="x-dictionary:d:last">last</a></li>
      <li>- <a href="x-dictionary:d:rest">rest</a></li>
      <li>- <a href="x-dictionary:d:compact">compact</a></li>
      <li>- <a href="x-dictionary:d:flatten">flatten</a></li>
      <li>- <a href="x-dictionary:d:without">without</a></li>
      <li>- <a href="x-dictionary:d:partition">partition</a></li>
      <li>- <a href="x-dictionary:d:union">union</a></li>
      <li>- <a href="x-dictionary:d:intersection">intersection</a></li>
      <li>- <a href="x-dictionary:d:difference">difference</a></li>
      <li>- <a href="x-dictionary:d:uniq">uniq</a></li>
      <li>- <a href="x-dictionary:d:zip">zip</a></li>
      <li>- <a href="x-dictionary:d:object">object</a></li>
      <li>- <a href="x-dictionary:d:indexOf">indexOf</a></li>
      <li>- <a href="x-dictionary:d:lastIndexOf">lastIndexOf</a></li>
      <li>- <a href="x-dictionary:d:sortedIndex">sortedIndex</a></li>
      <li>- <a href="x-dictionary:d:range">range</a></li>
    </ul></d:entry>
<d:entry id="_4e" d:title="Collections"><d:index d:value="Collections" d:title="Collections"/><h1>Collections</h1><a class="toc_title" href="x-dictionary:d:collections">
      Collections
    </a>
    
<ul class="toc_section">
      <li>- <a href="x-dictionary:d:each">each</a></li>
      <li>- <a href="x-dictionary:d:map">map</a></li>
      <li>- <a href="x-dictionary:d:reduce">reduce</a></li>
      <li>- <a href="x-dictionary:d:reduceRight">reduceRight</a></li>
      <li>- <a href="x-dictionary:d:find">find</a></li>
      <li>- <a href="x-dictionary:d:filter">filter</a></li>
      <li>- <a href="x-dictionary:d:where">where</a></li>
      <li>- <a href="x-dictionary:d:findWhere">findWhere</a></li>
      <li>- <a href="x-dictionary:d:reject">reject</a></li>
      <li>- <a href="x-dictionary:d:every">every</a></li>
      <li>- <a href="x-dictionary:d:some">some</a></li>
      <li>- <a href="x-dictionary:d:contains">contains</a></li>
      <li>- <a href="x-dictionary:d:invoke">invoke</a></li>
      <li>- <a href="x-dictionary:d:pluck">pluck</a></li>
      <li>- <a href="x-dictionary:d:max">max</a></li>
      <li>- <a href="x-dictionary:d:min">min</a></li>
      <li>- <a href="x-dictionary:d:sortBy">sortBy</a></li>
      <li>- <a href="x-dictionary:d:groupBy">groupBy</a></li>
      <li>- <a href="x-dictionary:d:indexBy">indexBy</a></li>
      <li>- <a href="x-dictionary:d:countBy">countBy</a></li>
      <li>- <a href="x-dictionary:d:shuffle">shuffle</a></li>
      <li>- <a href="x-dictionary:d:sample">sample</a></li>
      <li>- <a href="x-dictionary:d:toArray">toArray</a></li>
      <li>- <a href="x-dictionary:d:size">size</a></li>
    </ul></d:entry>
<d:entry id="_4f" d:title="Underscore.js"><d:index d:value="Underscore.js" d:title="Underscore.js"/><h1>Underscore.js</h1><a class="toc_title" href="">
      Underscore.js <span class="version">(1.6.0)</span>
    </a>
    
<ul class="toc_section">
      <li> <a href="https://github.com/jashkenas/underscore">GitHub Repository</a></li>
      <li> <a href="http://underscorejs.org/docs/underscore.html">Annotated Source</a></li>
      <li> <a href="http://documentcloud.github.io/underscore-contrib/">Underscore-contrib</a></li>
    </ul></d:entry>
</d:dictionary>
